!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Asm	properties	/properties (req, vararg for parameters)/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!LdScript	assignment	/how a value is assigned to the symbol/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Asm	d,define	/defines/
!_TAG_KIND_DESCRIPTION!Asm	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Asm	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Asm	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Asm	t,type	/types (structs and records)/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!EmacsLisp	C,custom	/customizable variables/
!_TAG_KIND_DESCRIPTION!EmacsLisp	D,derivedMode	/derived major mode/
!_TAG_KIND_DESCRIPTION!EmacsLisp	G,group	/customization groups/
!_TAG_KIND_DESCRIPTION!EmacsLisp	H,face	/customizable faces/
!_TAG_KIND_DESCRIPTION!EmacsLisp	M,minorMode	/minor modes/
!_TAG_KIND_DESCRIPTION!EmacsLisp	T,theme	/custom themes/
!_TAG_KIND_DESCRIPTION!EmacsLisp	V,varalias	/aliases for variables/
!_TAG_KIND_DESCRIPTION!EmacsLisp	Y,unknown	/unknown type of definitions/
!_TAG_KIND_DESCRIPTION!EmacsLisp	a,alias	/aliases for functions/
!_TAG_KIND_DESCRIPTION!EmacsLisp	c,const	/constants/
!_TAG_KIND_DESCRIPTION!EmacsLisp	e,error	/errors/
!_TAG_KIND_DESCRIPTION!EmacsLisp	f,function	/functions/
!_TAG_KIND_DESCRIPTION!EmacsLisp	i,inline	/inline function/
!_TAG_KIND_DESCRIPTION!EmacsLisp	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!EmacsLisp	s,subst	/inline function/
!_TAG_KIND_DESCRIPTION!EmacsLisp	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!LdScript	S,section	/sections/
!_TAG_KIND_DESCRIPTION!LdScript	i,inputSection	/input sections/
!_TAG_KIND_DESCRIPTION!LdScript	s,symbol	/symbols/
!_TAG_KIND_DESCRIPTION!LdScript	v,version	/versions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Perl	c,constant	/constants/
!_TAG_KIND_DESCRIPTION!Perl	f,format	/formats/
!_TAG_KIND_DESCRIPTION!Perl	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Perl	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Perl	s,subroutine	/subroutines/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Asm	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!EmacsLisp	0.0	/current.age/
!_TAG_PARSER_VERSION!LdScript	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Perl	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/hx/courses/6.s081/xv6-labs-2023/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20231001.0/
!_TAG_ROLE_DESCRIPTION!Asm!section	placement	/placement where the assembled code goes/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	discarded	/discarded when linking/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	mapped	/mapped to output section/
!_TAG_ROLE_DESCRIPTION!LdScript!symbol	entrypoint	/entry points/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
$(OBJS)	Makefile	/^$(OBJS): EXTRAFLAG := $(KCSANFLAG)$/;"	t
$K/%.o	Makefile	/^$K\/%.o: $K\/%.c$/;"	t
$K/kernel	Makefile	/^$K\/kernel: $(OBJS) $(OBJS_KCSAN) $K\/kernel.ld $U\/initcode$/;"	t
$U/_forktest	Makefile	/^$U\/_forktest: $U\/forktest.o $(ULIB)$/;"	t
$U/_uthread	Makefile	/^$U\/_uthread: $U\/uthread.o $U\/uthread_switch.o $(ULIB)$/;"	t
$U/initcode	Makefile	/^$U\/initcode: $U\/initcode.S$/;"	t
$U/usys.S	Makefile	/^$U\/usys.S : $U\/usys.pl$/;"	t
$U/usys.o	Makefile	/^$U\/usys.o : $U\/usys.S$/;"	t
$U/uthread_switch.o	Makefile	/^$U\/uthread_switch.o : $U\/uthread_switch.S$/;"	t
.bss	kernel/kernel.ld	/^  .bss : {$/;"	S
.bss	user/user.ld	/^  .bss : {$/;"	S
.data	kernel/kernel.ld	/^  .data : {$/;"	S
.data	user/user.ld	/^  .data : {$/;"	S
.gdbinit	Makefile	/^.gdbinit: .gdbinit.tmpl-riscv$/;"	t
.rodata	kernel/kernel.ld	/^  .rodata : {$/;"	S
.rodata	user/user.ld	/^  .rodata : {$/;"	S
.text	kernel/kernel.ld	/^  .text : {$/;"	S
.text	user/user.ld	/^  .text : {$/;"	S
ARECORD	kernel/net.h	/^#define ARECORD /;"	d
ARP_HRD_ETHER	kernel/net.h	/^#define ARP_HRD_ETHER /;"	d
ARP_OP_REPLY	kernel/net.h	/^  ARP_OP_REPLY = 2,   \/\/ replies a hw addr given protocol addr$/;"	e	enum:__anon6b486f120103
ARP_OP_REQUEST	kernel/net.h	/^  ARP_OP_REQUEST = 1, \/\/ requests hw addr given protocol addr$/;"	e	enum:__anon6b486f120103
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
Align	user/umalloc.c	/^typedef long Align;$/;"	t	typeref:typename:long	file:
BACK	user/sh.c	/^#define BACK /;"	d	file:
BACKSPACE	kernel/console.c	/^#define BACKSPACE /;"	d	file:
BBLOCK	kernel/fs.h	/^#define BBLOCK(/;"	d
BIG	user/usertests.c	/^  enum { BIG=100*1024*1024 };$/;"	e	enum:sbrkfail::__anon2469bfd61003	file:
BIG	user/usertests.c	/^  enum { BIG=100*1024*1024 };$/;"	e	enum:sbrkmuch::__anon2469bfd60f03	file:
BPB	kernel/fs.h	/^#define BPB /;"	d
BSIZE	kernel/fs.h	/^#define BSIZE /;"	d
BUFSZ	user/usertests.c	/^#define BUFSZ /;"	d	file:
C	kernel/console.c	/^#define C(x)  ((x)-'@')  \/\/ Co/;"	d	file:
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2$/;"	m
CLINT	kernel/memlayout.h	/^#define CLINT /;"	d
CLINT_MTIME	kernel/memlayout.h	/^#define CLINT_MTIME /;"	d
CLINT_MTIMECMP	kernel/memlayout.h	/^#define CLINT_MTIMECMP(/;"	d
COLORS	gradelib.py	/^COLORS = {"default": "\\033[0m", "red": "\\033[31m", "green": "\\033[32m"}$/;"	v
CONSOLE	kernel/file.h	/^#define CONSOLE /;"	d
CPUS	Makefile	/^CPUS := 1$/;"	m
CPUS	Makefile	/^CPUS := 3$/;"	m
CURRENT_TEST	gradelib.py	/^CURRENT_TEST = None$/;"	v
DATA_MAX	kernel/e1000_dev.h	/^#define DATA_MAX /;"	d
DIRSIZ	kernel/fs.h	/^#define DIRSIZ /;"	d
E1000_CTL	kernel/e1000_dev.h	/^#define E1000_CTL /;"	d
E1000_CTL_FRCDPLX	kernel/e1000_dev.h	/^#define E1000_CTL_FRCDPLX /;"	d
E1000_CTL_FRCSPD	kernel/e1000_dev.h	/^#define E1000_CTL_FRCSPD /;"	d
E1000_CTL_RST	kernel/e1000_dev.h	/^#define E1000_CTL_RST /;"	d
E1000_CTL_SLU	kernel/e1000_dev.h	/^#define E1000_CTL_SLU /;"	d
E1000_ICR	kernel/e1000_dev.h	/^#define E1000_ICR /;"	d
E1000_IMS	kernel/e1000_dev.h	/^#define E1000_IMS /;"	d
E1000_IRQ	kernel/memlayout.h	/^#define E1000_IRQ /;"	d
E1000_MTA	kernel/e1000_dev.h	/^#define E1000_MTA /;"	d
E1000_RA	kernel/e1000_dev.h	/^#define E1000_RA /;"	d
E1000_RADV	kernel/e1000_dev.h	/^#define E1000_RADV /;"	d
E1000_RCTL	kernel/e1000_dev.h	/^#define E1000_RCTL /;"	d
E1000_RCTL_BAM	kernel/e1000_dev.h	/^#define E1000_RCTL_BAM /;"	d
E1000_RCTL_BSEX	kernel/e1000_dev.h	/^#define E1000_RCTL_BSEX /;"	d
E1000_RCTL_CFI	kernel/e1000_dev.h	/^#define E1000_RCTL_CFI /;"	d
E1000_RCTL_CFIEN	kernel/e1000_dev.h	/^#define E1000_RCTL_CFIEN /;"	d
E1000_RCTL_DPF	kernel/e1000_dev.h	/^#define E1000_RCTL_DPF /;"	d
E1000_RCTL_DTYP_MASK	kernel/e1000_dev.h	/^#define E1000_RCTL_DTYP_MASK /;"	d
E1000_RCTL_DTYP_PS	kernel/e1000_dev.h	/^#define E1000_RCTL_DTYP_PS /;"	d
E1000_RCTL_EN	kernel/e1000_dev.h	/^#define E1000_RCTL_EN /;"	d
E1000_RCTL_FLXBUF_MASK	kernel/e1000_dev.h	/^#define E1000_RCTL_FLXBUF_MASK /;"	d
E1000_RCTL_FLXBUF_SHIFT	kernel/e1000_dev.h	/^#define E1000_RCTL_FLXBUF_SHIFT /;"	d
E1000_RCTL_LBM_MAC	kernel/e1000_dev.h	/^#define E1000_RCTL_LBM_MAC /;"	d
E1000_RCTL_LBM_NO	kernel/e1000_dev.h	/^#define E1000_RCTL_LBM_NO /;"	d
E1000_RCTL_LBM_SLP	kernel/e1000_dev.h	/^#define E1000_RCTL_LBM_SLP /;"	d
E1000_RCTL_LBM_TCVR	kernel/e1000_dev.h	/^#define E1000_RCTL_LBM_TCVR /;"	d
E1000_RCTL_LPE	kernel/e1000_dev.h	/^#define E1000_RCTL_LPE /;"	d
E1000_RCTL_MDR	kernel/e1000_dev.h	/^#define E1000_RCTL_MDR /;"	d
E1000_RCTL_MO_0	kernel/e1000_dev.h	/^#define E1000_RCTL_MO_0 /;"	d
E1000_RCTL_MO_1	kernel/e1000_dev.h	/^#define E1000_RCTL_MO_1 /;"	d
E1000_RCTL_MO_2	kernel/e1000_dev.h	/^#define E1000_RCTL_MO_2 /;"	d
E1000_RCTL_MO_3	kernel/e1000_dev.h	/^#define E1000_RCTL_MO_3 /;"	d
E1000_RCTL_MO_SHIFT	kernel/e1000_dev.h	/^#define E1000_RCTL_MO_SHIFT /;"	d
E1000_RCTL_MPE	kernel/e1000_dev.h	/^#define E1000_RCTL_MPE /;"	d
E1000_RCTL_PMCF	kernel/e1000_dev.h	/^#define E1000_RCTL_PMCF /;"	d
E1000_RCTL_RDMTS_EIGTH	kernel/e1000_dev.h	/^#define E1000_RCTL_RDMTS_EIGTH /;"	d
E1000_RCTL_RDMTS_HALF	kernel/e1000_dev.h	/^#define E1000_RCTL_RDMTS_HALF /;"	d
E1000_RCTL_RDMTS_QUAT	kernel/e1000_dev.h	/^#define E1000_RCTL_RDMTS_QUAT /;"	d
E1000_RCTL_RST	kernel/e1000_dev.h	/^#define E1000_RCTL_RST /;"	d
E1000_RCTL_SBP	kernel/e1000_dev.h	/^#define E1000_RCTL_SBP /;"	d
E1000_RCTL_SECRC	kernel/e1000_dev.h	/^#define E1000_RCTL_SECRC /;"	d
E1000_RCTL_SZ_1024	kernel/e1000_dev.h	/^#define E1000_RCTL_SZ_1024 /;"	d
E1000_RCTL_SZ_16384	kernel/e1000_dev.h	/^#define E1000_RCTL_SZ_16384 /;"	d
E1000_RCTL_SZ_2048	kernel/e1000_dev.h	/^#define E1000_RCTL_SZ_2048 /;"	d
E1000_RCTL_SZ_256	kernel/e1000_dev.h	/^#define E1000_RCTL_SZ_256 /;"	d
E1000_RCTL_SZ_4096	kernel/e1000_dev.h	/^#define E1000_RCTL_SZ_4096 /;"	d
E1000_RCTL_SZ_512	kernel/e1000_dev.h	/^#define E1000_RCTL_SZ_512 /;"	d
E1000_RCTL_SZ_8192	kernel/e1000_dev.h	/^#define E1000_RCTL_SZ_8192 /;"	d
E1000_RCTL_UPE	kernel/e1000_dev.h	/^#define E1000_RCTL_UPE /;"	d
E1000_RCTL_VFE	kernel/e1000_dev.h	/^#define E1000_RCTL_VFE /;"	d
E1000_RDBAL	kernel/e1000_dev.h	/^#define E1000_RDBAL /;"	d
E1000_RDH	kernel/e1000_dev.h	/^#define E1000_RDH /;"	d
E1000_RDLEN	kernel/e1000_dev.h	/^#define E1000_RDLEN /;"	d
E1000_RDT	kernel/e1000_dev.h	/^#define E1000_RDT /;"	d
E1000_RDTR	kernel/e1000_dev.h	/^#define E1000_RDTR /;"	d
E1000_RSRPD	kernel/e1000_dev.h	/^#define E1000_RSRPD /;"	d
E1000_RXD_STAT_DD	kernel/e1000_dev.h	/^#define E1000_RXD_STAT_DD /;"	d
E1000_RXD_STAT_EOP	kernel/e1000_dev.h	/^#define E1000_RXD_STAT_EOP /;"	d
E1000_TCTL	kernel/e1000_dev.h	/^#define E1000_TCTL /;"	d
E1000_TCTL_BCE	kernel/e1000_dev.h	/^#define E1000_TCTL_BCE /;"	d
E1000_TCTL_COLD	kernel/e1000_dev.h	/^#define E1000_TCTL_COLD /;"	d
E1000_TCTL_COLD_SHIFT	kernel/e1000_dev.h	/^#define E1000_TCTL_COLD_SHIFT /;"	d
E1000_TCTL_CT	kernel/e1000_dev.h	/^#define E1000_TCTL_CT /;"	d
E1000_TCTL_CT_SHIFT	kernel/e1000_dev.h	/^#define E1000_TCTL_CT_SHIFT /;"	d
E1000_TCTL_EN	kernel/e1000_dev.h	/^#define E1000_TCTL_EN /;"	d
E1000_TCTL_MULR	kernel/e1000_dev.h	/^#define E1000_TCTL_MULR /;"	d
E1000_TCTL_NRTU	kernel/e1000_dev.h	/^#define E1000_TCTL_NRTU /;"	d
E1000_TCTL_PBE	kernel/e1000_dev.h	/^#define E1000_TCTL_PBE /;"	d
E1000_TCTL_PSP	kernel/e1000_dev.h	/^#define E1000_TCTL_PSP /;"	d
E1000_TCTL_RST	kernel/e1000_dev.h	/^#define E1000_TCTL_RST /;"	d
E1000_TCTL_RTLC	kernel/e1000_dev.h	/^#define E1000_TCTL_RTLC /;"	d
E1000_TCTL_SWXOFF	kernel/e1000_dev.h	/^#define E1000_TCTL_SWXOFF /;"	d
E1000_TDBAL	kernel/e1000_dev.h	/^#define E1000_TDBAL /;"	d
E1000_TDH	kernel/e1000_dev.h	/^#define E1000_TDH /;"	d
E1000_TDLEN	kernel/e1000_dev.h	/^#define E1000_TDLEN /;"	d
E1000_TDT	kernel/e1000_dev.h	/^#define E1000_TDT /;"	d
E1000_TIPG	kernel/e1000_dev.h	/^#define E1000_TIPG /;"	d
E1000_TXD_CMD_EOP	kernel/e1000_dev.h	/^#define E1000_TXD_CMD_EOP /;"	d
E1000_TXD_CMD_RS	kernel/e1000_dev.h	/^#define E1000_TXD_CMD_RS /;"	d
E1000_TXD_STAT_DD	kernel/e1000_dev.h	/^#define E1000_TXD_STAT_DD /;"	d
ELF_MAGIC	kernel/elf.h	/^#define ELF_MAGIC /;"	d
ELF_PROG_FLAG_EXEC	kernel/elf.h	/^#define ELF_PROG_FLAG_EXEC /;"	d
ELF_PROG_FLAG_READ	kernel/elf.h	/^#define ELF_PROG_FLAG_READ /;"	d
ELF_PROG_FLAG_WRITE	kernel/elf.h	/^#define ELF_PROG_FLAG_WRITE /;"	d
ELF_PROG_LOAD	kernel/elf.h	/^#define ELF_PROG_LOAD /;"	d
ETHADDR_LEN	kernel/net.h	/^#define ETHADDR_LEN /;"	d
ETHTYPE_ARP	kernel/net.h	/^#define ETHTYPE_ARP /;"	d
ETHTYPE_IP	kernel/net.h	/^#define ETHTYPE_IP /;"	d
EXEC	user/sh.c	/^#define EXEC /;"	d	file:
EXTRAFLAG	Makefile	/^$(OBJS): EXTRAFLAG := $(KCSANFLAG)$/;"	m
FCR	kernel/uart.c	/^#define FCR /;"	d	file:
FCR_FIFO_CLEAR	kernel/uart.c	/^#define FCR_FIFO_CLEAR /;"	d	file:
FCR_FIFO_ENABLE	kernel/uart.c	/^#define FCR_FIFO_ENABLE /;"	d	file:
FD_DEVICE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE, FD_SOCK } type;$/;"	e	enum:file::__anonc1f1ee2b0103
FD_INODE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE, FD_SOCK } type;$/;"	e	enum:file::__anonc1f1ee2b0103
FD_NONE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE, FD_SOCK } type;$/;"	e	enum:file::__anonc1f1ee2b0103
FD_PIPE	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE, FD_SOCK } type;$/;"	e	enum:file::__anonc1f1ee2b0103
FD_SOCK	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE, FD_SOCK } type;$/;"	e	enum:file::__anonc1f1ee2b0103
FSMAGIC	kernel/fs.h	/^#define FSMAGIC /;"	d
FSSIZE	kernel/param.h	/^#define FSSIZE /;"	d
FWDPORT	Makefile	/^FWDPORT = $(shell expr `id -u` % 5000 + 25999)$/;"	m
GDBClient	gradelib.py	/^class GDBClient(object):$/;"	c
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
GRADES	gradelib.py	/^GRADES = {}$/;"	v
Header	user/umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	kernel/fs.h	/^#define IBLOCK(/;"	d
IER	kernel/uart.c	/^#define IER /;"	d	file:
IER_RX_ENABLE	kernel/uart.c	/^#define IER_RX_ENABLE /;"	d	file:
IER_TX_ENABLE	kernel/uart.c	/^#define IER_TX_ENABLE /;"	d	file:
INPUT_BUF_SIZE	kernel/console.c	/^#define INPUT_BUF_SIZE /;"	d	file:
IPB	kernel/fs.h	/^#define IPB /;"	d
IPPROTO_ICMP	kernel/net.h	/^#define IPPROTO_ICMP /;"	d
IPPROTO_TCP	kernel/net.h	/^#define IPPROTO_TCP /;"	d
IPPROTO_UDP	kernel/net.h	/^#define IPPROTO_UDP /;"	d
ISR	kernel/uart.c	/^#define ISR /;"	d	file:
K	Makefile	/^K=kernel$/;"	m
KCSANFLAG	Makefile	/^KCSANFLAG = -fsanitize=thread -fno-inline$/;"	m
KERNBASE	kernel/memlayout.h	/^#define KERNBASE /;"	d
KSTACK	kernel/memlayout.h	/^#define KSTACK(/;"	d
LAB	conf/lab.mk	/^LAB=net$/;"	m
LABUPPER	Makefile	/^LABUPPER = $(shell echo $(LAB) | tr a-z A-Z)$/;"	m
LCR	kernel/uart.c	/^#define LCR /;"	d	file:
LCR_BAUD_LATCH	kernel/uart.c	/^#define LCR_BAUD_LATCH /;"	d	file:
LCR_EIGHT_BITS	kernel/uart.c	/^#define LCR_EIGHT_BITS /;"	d	file:
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -z max-page-size=4096$/;"	m
LIST	user/sh.c	/^#define LIST /;"	d	file:
LOGSIZE	kernel/param.h	/^#define LOGSIZE /;"	d
LSR	kernel/uart.c	/^#define LSR /;"	d	file:
LSR_RX_READY	kernel/uart.c	/^#define LSR_RX_READY /;"	d	file:
LSR_TX_IDLE	kernel/uart.c	/^#define LSR_TX_IDLE /;"	d	file:
MAKE_IP_ADDR	kernel/net.h	/^#define MAKE_IP_ADDR(/;"	d
MAKE_SATP	kernel/riscv.h	/^#define MAKE_SATP(/;"	d
MAKE_TIMESTAMP	gradelib.py	/^MAKE_TIMESTAMP = 0$/;"	v
MAXARG	kernel/param.h	/^#define MAXARG /;"	d
MAXARGS	user/sh.c	/^#define MAXARGS /;"	d	file:
MAXFILE	kernel/fs.h	/^#define MAXFILE /;"	d
MAXOPBLOCKS	kernel/param.h	/^#define MAXOPBLOCKS /;"	d
MAXPATH	kernel/param.h	/^#define MAXPATH /;"	d
MAXVA	kernel/riscv.h	/^#define MAXVA /;"	d
MAXVAplus	user/usertests.c	/^MAXVAplus(char *s)$/;"	f	typeref:typename:void
MBUF_DEFAULT_HEADROOM	kernel/net.h	/^#define MBUF_DEFAULT_HEADROOM /;"	d
MBUF_SIZE	kernel/net.h	/^#define MBUF_SIZE /;"	d
MIE_MEIE	kernel/riscv.h	/^#define MIE_MEIE /;"	d
MIE_MSIE	kernel/riscv.h	/^#define MIE_MSIE /;"	d
MIE_MTIE	kernel/riscv.h	/^#define MIE_MTIE /;"	d
MSTATUS_MIE	kernel/riscv.h	/^#define MSTATUS_MIE /;"	d
MSTATUS_MPP_M	kernel/riscv.h	/^#define MSTATUS_MPP_M /;"	d
MSTATUS_MPP_MASK	kernel/riscv.h	/^#define MSTATUS_MPP_MASK /;"	d
MSTATUS_MPP_S	kernel/riscv.h	/^#define MSTATUS_MPP_S /;"	d
MSTATUS_MPP_U	kernel/riscv.h	/^#define MSTATUS_MPP_U /;"	d
N	user/forktest.c	/^#define N /;"	d	file:
N	user/nettests.c	/^  #define N /;"	d	file:
N	user/pingpong.c	/^#define N /;"	d	file:
N	user/usertests.c	/^  enum { N = 1000, SZ=10};$/;"	e	enum:sharedfd::__anon2469bfd60503	file:
N	user/usertests.c	/^  enum { N = 20, NCHILD=4 };$/;"	e	enum:createdelete::__anon2469bfd60703	file:
N	user/usertests.c	/^  enum { N = 20, SZ=600 };$/;"	e	enum:bigfile::__anon2469bfd60c03	file:
N	user/usertests.c	/^  enum { N = 40 };$/;"	e	enum:concreate::__anon2469bfd60a03	file:
N	user/usertests.c	/^  enum { N = 500 };$/;"	e	enum:bigdir::__anon2469bfd61103	file:
N	user/usertests.c	/^  enum { N=100, SZ=10 };$/;"	e	enum:writetest::__anon2469bfd60103	file:
N	user/usertests.c	/^  enum { N=12, NCHILD=4, SZ=500 };$/;"	e	enum:fourfiles::__anon2469bfd60603	file:
N	user/usertests.c	/^  enum { N=2 };$/;"	e	enum:forkfork::__anon2469bfd60403	file:
N	user/usertests.c	/^  enum { N=5, SZ=1033 };$/;"	e	enum:pipe1::__anon2469bfd60303	file:
N	user/usertests.c	/^  enum { N=52 };$/;"	e	enum:createtest::__anon2469bfd60203	file:
N	user/usertests.c	/^  enum{ N = 1000 };$/;"	e	enum:forktest::__anon2469bfd60d03	file:
NBUF	kernel/param.h	/^#define NBUF /;"	d
NCHILD	user/usertests.c	/^  enum { N = 20, NCHILD=4 };$/;"	e	enum:createdelete::__anon2469bfd60703	file:
NCHILD	user/usertests.c	/^  enum { N=12, NCHILD=4, SZ=500 };$/;"	e	enum:fourfiles::__anon2469bfd60603	file:
NCPU	kernel/param.h	/^#define NCPU /;"	d
NDEV	kernel/param.h	/^#define NDEV /;"	d
NDIRECT	kernel/fs.h	/^#define NDIRECT /;"	d
NELEM	kernel/defs.h	/^#define NELEM(/;"	d
NFILE	kernel/param.h	/^#define NFILE /;"	d
NINDIRECT	kernel/fs.h	/^#define NINDIRECT /;"	d
NINODE	kernel/param.h	/^#define NINODE /;"	d
NINODES	mkfs/mkfs.c	/^#define NINODES /;"	d	file:
NLOCK	kernel/spinlock.c	/^#define NLOCK /;"	d	file:
NOFILE	kernel/param.h	/^#define NOFILE /;"	d
NPROC	kernel/param.h	/^#define NPROC /;"	d
NUM	kernel/virtio.h	/^#define NUM /;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
OBJS_KCSAN	Makefile	/^OBJS_KCSAN = \\$/;"	m
O_CREATE	kernel/fcntl.h	/^#define O_CREATE /;"	d
O_RDONLY	kernel/fcntl.h	/^#define O_RDONLY /;"	d
O_RDWR	kernel/fcntl.h	/^#define O_RDWR /;"	d
O_TRUNC	kernel/fcntl.h	/^#define O_TRUNC /;"	d
O_WRONLY	kernel/fcntl.h	/^#define O_WRONLY /;"	d
PA2PTE	kernel/riscv.h	/^#define PA2PTE(/;"	d
PART_TOTAL	gradelib.py	/^PART_TOTAL = PART_POSSIBLE = 0$/;"	v
PGROUNDDOWN	kernel/riscv.h	/^#define PGROUNDDOWN(/;"	d
PGROUNDUP	kernel/riscv.h	/^#define PGROUNDUP(/;"	d
PGSHIFT	kernel/riscv.h	/^#define PGSHIFT /;"	d
PGSIZE	kernel/riscv.h	/^#define PGSIZE /;"	d
PHYSTOP	kernel/memlayout.h	/^#define PHYSTOP /;"	d
PIPE	user/sh.c	/^#define PIPE /;"	d	file:
PIPESIZE	kernel/pipe.c	/^#define PIPESIZE /;"	d	file:
PLIC	kernel/memlayout.h	/^#define PLIC /;"	d
PLIC_MCLAIM	kernel/memlayout.h	/^#define PLIC_MCLAIM(/;"	d
PLIC_MENABLE	kernel/memlayout.h	/^#define PLIC_MENABLE(/;"	d
PLIC_MPRIORITY	kernel/memlayout.h	/^#define PLIC_MPRIORITY(/;"	d
PLIC_PENDING	kernel/memlayout.h	/^#define PLIC_PENDING /;"	d
PLIC_PRIORITY	kernel/memlayout.h	/^#define PLIC_PRIORITY /;"	d
PLIC_SCLAIM	kernel/memlayout.h	/^#define PLIC_SCLAIM(/;"	d
PLIC_SENABLE	kernel/memlayout.h	/^#define PLIC_SENABLE(/;"	d
PLIC_SPRIORITY	kernel/memlayout.h	/^#define PLIC_SPRIORITY(/;"	d
PTE2PA	kernel/riscv.h	/^#define PTE2PA(/;"	d
PTE_FLAGS	kernel/riscv.h	/^#define PTE_FLAGS(/;"	d
PTE_R	kernel/riscv.h	/^#define PTE_R /;"	d
PTE_U	kernel/riscv.h	/^#define PTE_U /;"	d
PTE_V	kernel/riscv.h	/^#define PTE_V /;"	d
PTE_W	kernel/riscv.h	/^#define PTE_W /;"	d
PTE_X	kernel/riscv.h	/^#define PTE_X /;"	d
PX	kernel/riscv.h	/^#define PX(level, va) ((((uint64) (va)) >> PXSHIFT(level)) & PXM/;"	d
PXMASK	kernel/riscv.h	/^#define PXMASK /;"	d
PXSHIFT	kernel/riscv.h	/^#define PXSHIFT(/;"	d
QCLASS	kernel/net.h	/^#define QCLASS /;"	d
QEMU	Makefile	/^QEMU = qemu-system-riscv64$/;"	m
QEMU	gradelib.py	/^class QEMU(object):$/;"	c
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -machine virt -bios none -kernel $K\/kernel -m 128M -smp $(CPUS) -nographic$/;"	m
R	kernel/virtio_disk.c	/^#define R(r) ((volatile uint32 *)(VIRT/;"	d	file:
REDIR	user/sh.c	/^#define REDIR /;"	d	file:
RHR	kernel/uart.c	/^#define RHR /;"	d	file:
ROOTDEV	kernel/param.h	/^#define ROOTDEV /;"	d
ROOTINO	kernel/fs.h	/^#define ROOTINO /;"	d
RUNNABLE	kernel/proc.h	/^enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	kernel/proc.h	/^enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RX_RING_SIZE	kernel/e1000.c	/^#define RX_RING_SIZE /;"	d	file:
ReadReg	kernel/uart.c	/^#define ReadReg(/;"	d	file:
Reg	kernel/uart.c	/^#define Reg(/;"	d	file:
Runner	gradelib.py	/^class Runner():$/;"	c
SATP_SV39	kernel/riscv.h	/^#define SATP_SV39 /;"	d
SERVERPORT	Makefile	/^SERVERPORT = $(shell expr `id -u` % 5000 + 25099)$/;"	m
SIE_SEIE	kernel/riscv.h	/^#define SIE_SEIE /;"	d
SIE_SSIE	kernel/riscv.h	/^#define SIE_SSIE /;"	d
SIE_STIE	kernel/riscv.h	/^#define SIE_STIE /;"	d
SLEEPING	kernel/proc.h	/^enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SSTATUS_SIE	kernel/riscv.h	/^#define SSTATUS_SIE /;"	d
SSTATUS_SPIE	kernel/riscv.h	/^#define SSTATUS_SPIE /;"	d
SSTATUS_SPP	kernel/riscv.h	/^#define SSTATUS_SPP /;"	d
SSTATUS_UIE	kernel/riscv.h	/^#define SSTATUS_UIE /;"	d
SSTATUS_UPIE	kernel/riscv.h	/^#define SSTATUS_UPIE /;"	d
STATS	kernel/file.h	/^#define STATS /;"	d
SYS_chdir	kernel/syscall.h	/^#define SYS_chdir /;"	d
SYS_close	kernel/syscall.h	/^#define SYS_close /;"	d
SYS_connect	kernel/syscall.h	/^#define SYS_connect /;"	d
SYS_dup	kernel/syscall.h	/^#define SYS_dup /;"	d
SYS_exec	kernel/syscall.h	/^#define SYS_exec /;"	d
SYS_exit	kernel/syscall.h	/^#define SYS_exit /;"	d
SYS_fork	kernel/syscall.h	/^#define SYS_fork /;"	d
SYS_fstat	kernel/syscall.h	/^#define SYS_fstat /;"	d
SYS_getpid	kernel/syscall.h	/^#define SYS_getpid /;"	d
SYS_kill	kernel/syscall.h	/^#define SYS_kill /;"	d
SYS_link	kernel/syscall.h	/^#define SYS_link /;"	d
SYS_mkdir	kernel/syscall.h	/^#define SYS_mkdir /;"	d
SYS_mknod	kernel/syscall.h	/^#define SYS_mknod /;"	d
SYS_mmap	kernel/syscall.h	/^#define SYS_mmap /;"	d
SYS_munmap	kernel/syscall.h	/^#define SYS_munmap /;"	d
SYS_open	kernel/syscall.h	/^#define SYS_open /;"	d
SYS_pgaccess	kernel/syscall.h	/^#define SYS_pgaccess /;"	d
SYS_pipe	kernel/syscall.h	/^#define SYS_pipe /;"	d
SYS_read	kernel/syscall.h	/^#define SYS_read /;"	d
SYS_sbrk	kernel/syscall.h	/^#define SYS_sbrk /;"	d
SYS_sigalarm	kernel/syscall.h	/^#define SYS_sigalarm /;"	d
SYS_sigreturn	kernel/syscall.h	/^#define SYS_sigreturn /;"	d
SYS_sleep	kernel/syscall.h	/^#define SYS_sleep /;"	d
SYS_symlink	kernel/syscall.h	/^#define SYS_symlink /;"	d
SYS_sysinfo	kernel/syscall.h	/^#define SYS_sysinfo /;"	d
SYS_trace	kernel/syscall.h	/^#define SYS_trace /;"	d
SYS_unlink	kernel/syscall.h	/^#define SYS_unlink /;"	d
SYS_uptime	kernel/syscall.h	/^#define SYS_uptime /;"	d
SYS_wait	kernel/syscall.h	/^#define SYS_wait /;"	d
SYS_write	kernel/syscall.h	/^#define SYS_write /;"	d
SZ	user/usertests.c	/^  enum { N = 1000, SZ=10};$/;"	e	enum:sharedfd::__anon2469bfd60503	file:
SZ	user/usertests.c	/^  enum { N = 20, SZ=600 };$/;"	e	enum:bigfile::__anon2469bfd60c03	file:
SZ	user/usertests.c	/^  enum { N=100, SZ=10 };$/;"	e	enum:writetest::__anon2469bfd60103	file:
SZ	user/usertests.c	/^  enum { N=12, NCHILD=4, SZ=500 };$/;"	e	enum:fourfiles::__anon2469bfd60603	file:
SZ	user/usertests.c	/^  enum { N=5, SZ=1033 };$/;"	e	enum:pipe1::__anon2469bfd60303	file:
SZ	user/usertests.c	/^  enum { SZ = 5 };$/;"	e	enum:linktest::__anon2469bfd60903	file:
SZ	user/usertests.c	/^  enum { SZ = 5 };$/;"	e	enum:unlinkread::__anon2469bfd60803	file:
TESTS	gradelib.py	/^TESTS = []$/;"	v
THR	kernel/uart.c	/^#define THR /;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big' >\/dev\/null 2>&/;"	m
TOOMUCH	user/usertests.c	/^  enum { TOOMUCH=1024*1024*1024};$/;"	e	enum:sbrkbasic::__anon2469bfd60e03	file:
TOTAL	gradelib.py	/^TOTAL = POSSIBLE = 0$/;"	v
TRAMPOLINE	kernel/memlayout.h	/^#define TRAMPOLINE /;"	d
TRAPFRAME	kernel/memlayout.h	/^#define TRAPFRAME /;"	d
TX_RING_SIZE	kernel/e1000.c	/^#define TX_RING_SIZE /;"	d	file:
T_DEVICE	kernel/stat.h	/^#define T_DEVICE /;"	d
T_DIR	kernel/stat.h	/^#define T_DIR /;"	d
T_FILE	kernel/stat.h	/^#define T_FILE /;"	d
TerminateTest	gradelib.py	/^class TerminateTest(Exception):$/;"	c
U	Makefile	/^U=user$/;"	m
UART0	kernel/memlayout.h	/^#define UART0 /;"	d
UART0_IRQ	kernel/memlayout.h	/^#define UART0_IRQ /;"	d
UART_TX_BUF_SIZE	kernel/uart.c	/^#define UART_TX_BUF_SIZE /;"	d	file:
UEXTRA	Makefile	/^UEXTRA=$/;"	m
ULIB	Makefile	/^ULIB = $U\/ulib.o $U\/usys.o $U\/printf.o $U\/umalloc.o$/;"	m
UNUSED	kernel/proc.h	/^enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
USED	kernel/proc.h	/^enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
USYSCALL	kernel/memlayout.h	/^#define USYSCALL /;"	d
VIRTIO0	kernel/memlayout.h	/^#define VIRTIO0 /;"	d
VIRTIO0_IRQ	kernel/memlayout.h	/^#define VIRTIO0_IRQ /;"	d
VIRTIO_BLK_F_CONFIG_WCE	kernel/virtio.h	/^#define VIRTIO_BLK_F_CONFIG_WCE /;"	d
VIRTIO_BLK_F_MQ	kernel/virtio.h	/^#define VIRTIO_BLK_F_MQ /;"	d
VIRTIO_BLK_F_RO	kernel/virtio.h	/^#define VIRTIO_BLK_F_RO /;"	d
VIRTIO_BLK_F_SCSI	kernel/virtio.h	/^#define VIRTIO_BLK_F_SCSI /;"	d
VIRTIO_BLK_T_IN	kernel/virtio.h	/^#define VIRTIO_BLK_T_IN /;"	d
VIRTIO_BLK_T_OUT	kernel/virtio.h	/^#define VIRTIO_BLK_T_OUT /;"	d
VIRTIO_CONFIG_S_ACKNOWLEDGE	kernel/virtio.h	/^#define VIRTIO_CONFIG_S_ACKNOWLEDGE	/;"	d
VIRTIO_CONFIG_S_DRIVER	kernel/virtio.h	/^#define VIRTIO_CONFIG_S_DRIVER	/;"	d
VIRTIO_CONFIG_S_DRIVER_OK	kernel/virtio.h	/^#define VIRTIO_CONFIG_S_DRIVER_OK	/;"	d
VIRTIO_CONFIG_S_FEATURES_OK	kernel/virtio.h	/^#define VIRTIO_CONFIG_S_FEATURES_OK	/;"	d
VIRTIO_F_ANY_LAYOUT	kernel/virtio.h	/^#define VIRTIO_F_ANY_LAYOUT /;"	d
VIRTIO_MMIO_DEVICE_DESC_HIGH	kernel/virtio.h	/^#define VIRTIO_MMIO_DEVICE_DESC_HIGH	/;"	d
VIRTIO_MMIO_DEVICE_DESC_LOW	kernel/virtio.h	/^#define VIRTIO_MMIO_DEVICE_DESC_LOW	/;"	d
VIRTIO_MMIO_DEVICE_FEATURES	kernel/virtio.h	/^#define VIRTIO_MMIO_DEVICE_FEATURES	/;"	d
VIRTIO_MMIO_DEVICE_ID	kernel/virtio.h	/^#define VIRTIO_MMIO_DEVICE_ID	/;"	d
VIRTIO_MMIO_DRIVER_DESC_HIGH	kernel/virtio.h	/^#define VIRTIO_MMIO_DRIVER_DESC_HIGH	/;"	d
VIRTIO_MMIO_DRIVER_DESC_LOW	kernel/virtio.h	/^#define VIRTIO_MMIO_DRIVER_DESC_LOW	/;"	d
VIRTIO_MMIO_DRIVER_FEATURES	kernel/virtio.h	/^#define VIRTIO_MMIO_DRIVER_FEATURES	/;"	d
VIRTIO_MMIO_INTERRUPT_ACK	kernel/virtio.h	/^#define VIRTIO_MMIO_INTERRUPT_ACK	/;"	d
VIRTIO_MMIO_INTERRUPT_STATUS	kernel/virtio.h	/^#define VIRTIO_MMIO_INTERRUPT_STATUS	/;"	d
VIRTIO_MMIO_MAGIC_VALUE	kernel/virtio.h	/^#define VIRTIO_MMIO_MAGIC_VALUE	/;"	d
VIRTIO_MMIO_QUEUE_DESC_HIGH	kernel/virtio.h	/^#define VIRTIO_MMIO_QUEUE_DESC_HIGH	/;"	d
VIRTIO_MMIO_QUEUE_DESC_LOW	kernel/virtio.h	/^#define VIRTIO_MMIO_QUEUE_DESC_LOW	/;"	d
VIRTIO_MMIO_QUEUE_NOTIFY	kernel/virtio.h	/^#define VIRTIO_MMIO_QUEUE_NOTIFY	/;"	d
VIRTIO_MMIO_QUEUE_NUM	kernel/virtio.h	/^#define VIRTIO_MMIO_QUEUE_NUM	/;"	d
VIRTIO_MMIO_QUEUE_NUM_MAX	kernel/virtio.h	/^#define VIRTIO_MMIO_QUEUE_NUM_MAX	/;"	d
VIRTIO_MMIO_QUEUE_READY	kernel/virtio.h	/^#define VIRTIO_MMIO_QUEUE_READY	/;"	d
VIRTIO_MMIO_QUEUE_SEL	kernel/virtio.h	/^#define VIRTIO_MMIO_QUEUE_SEL	/;"	d
VIRTIO_MMIO_STATUS	kernel/virtio.h	/^#define VIRTIO_MMIO_STATUS	/;"	d
VIRTIO_MMIO_VENDOR_ID	kernel/virtio.h	/^#define VIRTIO_MMIO_VENDOR_ID	/;"	d
VIRTIO_MMIO_VERSION	kernel/virtio.h	/^#define VIRTIO_MMIO_VERSION	/;"	d
VIRTIO_RING_F_EVENT_IDX	kernel/virtio.h	/^#define VIRTIO_RING_F_EVENT_IDX /;"	d
VIRTIO_RING_F_INDIRECT_DESC	kernel/virtio.h	/^#define VIRTIO_RING_F_INDIRECT_DESC /;"	d
VRING_DESC_F_NEXT	kernel/virtio.h	/^#define VRING_DESC_F_NEXT /;"	d
VRING_DESC_F_WRITE	kernel/virtio.h	/^#define VRING_DESC_F_WRITE /;"	d
WriteReg	kernel/uart.c	/^#define WriteReg(/;"	d	file:
ZOMBIE	kernel/proc.h	/^enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_%	Makefile	/^_%: %.o $(ULIB)$/;"	t
_GDBPORT	gradelib.py	/^    _GDBPORT = None$/;"	v	class:QEMU
__all__	gradelib.py	/^__all__ = []$/;"	v
__anon033c111f0108	kernel/fs.c	/^struct {$/;"	s	file:
__anon0ecc7a2d0108	kernel/virtio_disk.c	/^  struct {$/;"	s	struct:disk	file:
__anon2469bfd60103	user/usertests.c	/^  enum { N=100, SZ=10 };$/;"	g	function:writetest	file:
__anon2469bfd60203	user/usertests.c	/^  enum { N=52 };$/;"	g	function:createtest	file:
__anon2469bfd60303	user/usertests.c	/^  enum { N=5, SZ=1033 };$/;"	g	function:pipe1	file:
__anon2469bfd60403	user/usertests.c	/^  enum { N=2 };$/;"	g	function:forkfork	file:
__anon2469bfd60503	user/usertests.c	/^  enum { N = 1000, SZ=10};$/;"	g	function:sharedfd	file:
__anon2469bfd60603	user/usertests.c	/^  enum { N=12, NCHILD=4, SZ=500 };$/;"	g	function:fourfiles	file:
__anon2469bfd60703	user/usertests.c	/^  enum { N = 20, NCHILD=4 };$/;"	g	function:createdelete	file:
__anon2469bfd60803	user/usertests.c	/^  enum { SZ = 5 };$/;"	g	function:unlinkread	file:
__anon2469bfd60903	user/usertests.c	/^  enum { SZ = 5 };$/;"	g	function:linktest	file:
__anon2469bfd60a03	user/usertests.c	/^  enum { N = 40 };$/;"	g	function:concreate	file:
__anon2469bfd60b08	user/usertests.c	/^  struct {$/;"	s	function:concreate	file:
__anon2469bfd60c03	user/usertests.c	/^  enum { N = 20, SZ=600 };$/;"	g	function:bigfile	file:
__anon2469bfd60d03	user/usertests.c	/^  enum{ N = 1000 };$/;"	g	function:forktest	file:
__anon2469bfd60e03	user/usertests.c	/^  enum { TOOMUCH=1024*1024*1024};$/;"	g	function:sbrkbasic	file:
__anon2469bfd60f03	user/usertests.c	/^  enum { BIG=100*1024*1024 };$/;"	g	function:sbrkmuch	file:
__anon2469bfd61003	user/usertests.c	/^  enum { BIG=100*1024*1024 };$/;"	g	function:sbrkfail	file:
__anon2469bfd61103	user/usertests.c	/^  enum { N = 500 };$/;"	g	function:bigdir	file:
__anon3c3fa87c0108	kernel/kalloc.c	/^struct {$/;"	s	file:
__anon3d351ad10108	user/umalloc.c	/^  struct {$/;"	s	union:header	file:
__anon6a7165400108	kernel/bio.c	/^struct {$/;"	s	file:
__anon6b486f120103	kernel/net.h	/^enum {$/;"	g
__anonb6393d190108	kernel/console.c	/^struct {$/;"	s	file:
__anonc1f1ee260108	kernel/file.c	/^struct {$/;"	s	file:
__anonc1f1ee2b0103	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE, FD_SOCK } type;$/;"	g	struct:file
__anonef4e5b790108	kernel/printf.c	/^static struct {$/;"	s	file:
__init__	gradelib.py	/^    def __init__(self, *default_monitors):$/;"	m	class:Runner
__init__	gradelib.py	/^    def __init__(self, *make_args):$/;"	m	class:QEMU
__init__	gradelib.py	/^    def __init__(self, port, timeout=15):$/;"	m	class:GDBClient
__monitor_start	gradelib.py	/^    def __monitor_start(self, output):$/;"	m	class:Runner	file:
__react	gradelib.py	/^    def __react(self, reactors, timeout):$/;"	m	class:Runner	file:
__send	gradelib.py	/^    def __send(self, cmd):$/;"	m	class:GDBClient	file:
__send_break	gradelib.py	/^    def __send_break(self):$/;"	m	class:GDBClient	file:
_entry	kernel/entry.S	/^_entry:$/;"	l
_main	user/ulib.c	/^_main()$/;"	f	typeref:typename:void
_trampoline	kernel/kernel.ld	/^    _trampoline = .;$/;"	s	section:.text
a0	kernel/proc.h	/^  \/* 112 *\/ uint64 a0;$/;"	m	struct:trapframe	typeref:typename:uint64
a1	kernel/proc.h	/^  \/* 120 *\/ uint64 a1;$/;"	m	struct:trapframe	typeref:typename:uint64
a2	kernel/proc.h	/^  \/* 128 *\/ uint64 a2;$/;"	m	struct:trapframe	typeref:typename:uint64
a3	kernel/proc.h	/^  \/* 136 *\/ uint64 a3;$/;"	m	struct:trapframe	typeref:typename:uint64
a4	kernel/proc.h	/^  \/* 144 *\/ uint64 a4;$/;"	m	struct:trapframe	typeref:typename:uint64
a5	kernel/proc.h	/^  \/* 152 *\/ uint64 a5;$/;"	m	struct:trapframe	typeref:typename:uint64
a6	kernel/proc.h	/^  \/* 160 *\/ uint64 a6;$/;"	m	struct:trapframe	typeref:typename:uint64
a7	kernel/proc.h	/^  \/* 168 *\/ uint64 a7;$/;"	m	struct:trapframe	typeref:typename:uint64
aa	kernel/net.h	/^  uint8 aa: 1;  \/\/ authoritive$/;"	m	struct:dns	typeref:typename:uint8:1
acquire	kernel/spinlock.c	/^acquire(struct spinlock *lk)$/;"	f	typeref:typename:void
acquiresleep	kernel/sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
ad	kernel/net.h	/^  uint8 ad: 1;  \/\/ authenticated data$/;"	m	struct:dns	typeref:typename:uint8:1
addr	kernel/e1000_dev.h	/^  uint64 addr;       \/* Address of the descriptor's data buffer *\/$/;"	m	struct:rx_desc	typeref:typename:uint64
addr	kernel/e1000_dev.h	/^  uint64 addr;$/;"	m	struct:tx_desc	typeref:typename:uint64
addr	kernel/virtio.h	/^  uint64 addr;$/;"	m	struct:virtq_desc	typeref:typename:uint64
addr	ping.py	/^addr = ('localhost', int(sys.argv[1]))$/;"	v
addr	server.py	/^addr = ('localhost', int(sys.argv[1]))$/;"	v
addrs	kernel/file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode	typeref:typename:uint[]
addrs	kernel/fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode	typeref:typename:uint[]
align	kernel/elf.h	/^  uint64 align;$/;"	m	struct:proghdr	typeref:typename:uint64
alloc3_desc	kernel/virtio_disk.c	/^alloc3_desc(int *idx)$/;"	f	typeref:typename:int	file:
alloc_desc	kernel/virtio_disk.c	/^alloc_desc()$/;"	f	typeref:typename:int	file:
allocpid	kernel/proc.c	/^allocpid()$/;"	f	typeref:typename:int
allocproc	kernel/proc.c	/^allocproc(void)$/;"	f	typeref:struct:proc *	file:
ancount	kernel/net.h	/^  uint16 ancount; \/\/ number of resource records in answer section$/;"	m	struct:dns	typeref:typename:uint16
arcount	kernel/net.h	/^  uint16 arcount; \/\/ number of resource records in additional records$/;"	m	struct:dns	typeref:typename:uint16
argaddr	kernel/syscall.c	/^argaddr(int n, uint64 *ip)$/;"	f	typeref:typename:void
argfd	kernel/sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	typeref:typename:int	file:
argint	kernel/syscall.c	/^argint(int n, int *ip)$/;"	f	typeref:typename:void
argptest	user/usertests.c	/^void argptest(char *s)$/;"	f	typeref:typename:void
argraw	kernel/syscall.c	/^argraw(int n)$/;"	f	typeref:typename:uint64	file:
argstr	kernel/syscall.c	/^argstr(int n, char *buf, int max)$/;"	f	typeref:typename:int
argv	user/init.c	/^char *argv[] = { "sh", 0 };$/;"	v	typeref:typename:char * []
argv	user/initcode.S	/^argv:$/;"	l
argv	user/sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
arp	kernel/net.h	/^struct arp {$/;"	s
assert_equal	gradelib.py	/^def assert_equal(got, expect, msg=""):$/;"	f
assert_lines_match	gradelib.py	/^def assert_lines_match(text, *regexps, **kw):$/;"	f
assert_lines_match_kw	gradelib.py	/^    def assert_lines_match_kw(no=[]):$/;"	f	function:assert_lines_match	file:
atoi	user/ulib.c	/^atoi(const char *s)$/;"	f	typeref:typename:int
atomic_read4	kernel/spinlock.c	/^atomic_read4(int *addr) {$/;"	f	typeref:typename:int
avail	kernel/virtio_disk.c	/^  struct virtq_avail *avail;$/;"	m	struct:disk	typeref:struct:virtq_avail *	file:
b	kernel/virtio_disk.c	/^    struct buf *b;$/;"	m	struct:disk::__anon0ecc7a2d0108	typeref:struct:buf *	file:
backcmd	user/sh.c	/^backcmd(struct cmd *subcmd)$/;"	f	typeref:struct:cmd *
backcmd	user/sh.c	/^struct backcmd {$/;"	s	file:
badarg	user/usertests.c	/^badarg(char *s)$/;"	f	typeref:typename:void
badwrite	user/usertests.c	/^badwrite(char *s)$/;"	f	typeref:typename:void
balloc	kernel/fs.c	/^balloc(uint dev)$/;"	f	typeref:typename:uint	file:
balloc	mkfs/mkfs.c	/^balloc(int used)$/;"	f	typeref:typename:void
barrier	Makefile	/^barrier: notxv6\/barrier.c$/;"	t
base	user/umalloc.c	/^static Header base;$/;"	v	typeref:typename:Header	file:
bcache	kernel/bio.c	/^} bcache;$/;"	v	typeref:struct:__anon6a7165400108
begin_op	kernel/log.c	/^begin_op(void)$/;"	f	typeref:typename:void
bfree	kernel/fs.c	/^bfree(int dev, uint b)$/;"	f	typeref:typename:void	file:
bget	kernel/bio.c	/^bget(uint dev, uint blockno)$/;"	f	typeref:struct:buf *	file:
big	user/usertests.c	/^void *big = (void*) 0xeaeb0b5b00002f5e;$/;"	v	typeref:typename:void *
bigargtest	user/usertests.c	/^bigargtest(char *s)$/;"	f	typeref:typename:void
bigdir	user/usertests.c	/^bigdir(char *s)$/;"	f	typeref:typename:void
bigfile	user/usertests.c	/^bigfile(char *s)$/;"	f	typeref:typename:void
bigwrite	user/usertests.c	/^bigwrite(char *s)$/;"	f	typeref:typename:void
binit	kernel/bio.c	/^binit(void)$/;"	f	typeref:typename:void
block	kernel/log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	typeref:typename:int[]	file:
blockno	kernel/buf.h	/^  uint blockno;$/;"	m	struct:buf	typeref:typename:uint
bmap	kernel/fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	typeref:typename:uint	file:
bmapstart	kernel/fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock	typeref:typename:uint
bpin	kernel/bio.c	/^bpin(struct buf *b) {$/;"	f	typeref:typename:void
bread	kernel/bio.c	/^bread(uint dev, uint blockno)$/;"	f	typeref:struct:buf *
breakpoint	gradelib.py	/^    def breakpoint(self, addr):$/;"	m	class:GDBClient
brelse	kernel/bio.c	/^brelse(struct buf *b)$/;"	f	typeref:typename:void
broadcast_mac	kernel/net.c	/^static uint8 broadcast_mac[ETHADDR_LEN] = { 0xFF, 0XFF, 0XFF, 0XFF, 0XFF, 0XFF };$/;"	v	typeref:typename:uint8[]	file:
bsstest	user/usertests.c	/^bsstest(char *s)$/;"	f	typeref:typename:void
bswapl	kernel/net.h	/^static inline uint32 bswapl(uint32 val)$/;"	f	typeref:typename:uint32
bswaps	kernel/net.h	/^static inline uint16 bswaps(uint16 val)$/;"	f	typeref:typename:uint16
buf	gradelib.py	/^            buf = bytearray()$/;"	v	class:shell_script.setup_call_on_line.context
buf	kernel/bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon6a7165400108	typeref:struct:buf[]	file:
buf	kernel/buf.h	/^struct buf {$/;"	s
buf	kernel/console.c	/^  char buf[INPUT_BUF_SIZE];$/;"	m	struct:__anonb6393d190108	typeref:typename:char[]	file:
buf	kernel/net.h	/^  char         buf[MBUF_SIZE]; \/\/ the backing store$/;"	m	struct:mbuf	typeref:typename:char[]
buf	ping.py	/^buf = "this is a ping!".encode('utf-8')$/;"	v
buf	server.py	/^    buf, raddr = sock.recvfrom(4096)$/;"	v
buf	user/cat.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
buf	user/grep.c	/^char buf[1024];$/;"	v	typeref:typename:char[1024]
buf	user/pingpong.c	/^char buf[N];$/;"	v	typeref:typename:char[]
buf	user/usertests.c	/^char buf[BUFSZ];$/;"	v	typeref:typename:char[]
buf	user/wc.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
bunpin	kernel/bio.c	/^bunpin(struct buf *b) {$/;"	f	typeref:typename:void
bwrite	kernel/bio.c	/^bwrite(struct buf *b)$/;"	f	typeref:typename:void
bzero	kernel/fs.c	/^bzero(int dev, int bno)$/;"	f	typeref:typename:void	file:
call_on_line	gradelib.py	/^def call_on_line(regexp, callback):$/;"	f
cat	user/cat.c	/^cat(int fd)$/;"	f	typeref:typename:void
cd	kernel/net.h	/^  uint8 cd: 1;  \/\/ checking disabled$/;"	m	struct:dns	typeref:typename:uint8:1
chan	kernel/proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc	typeref:typename:void *
check_answers	gradelib.py	/^def check_answers(file, n=10):$/;"	f
check_time	gradelib.py	/^def check_time():$/;"	f
clean	Makefile	/^clean:$/;"	t
clockintr	kernel/trap.c	/^clockintr()$/;"	f	typeref:typename:void
close	gradelib.py	/^    def close(self):$/;"	m	class:GDBClient
cmd	kernel/e1000_dev.h	/^  uint8 cmd;$/;"	m	struct:tx_desc	typeref:typename:uint8
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:cmd *	file:
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:cmd *	file:
cmd	user/sh.c	/^struct cmd {$/;"	s	file:
color	gradelib.py	/^def color(name, text):$/;"	f
commit	kernel/log.c	/^commit()$/;"	f	typeref:typename:void	file:
committing	kernel/log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	typeref:typename:int	file:
concreate	user/usertests.c	/^concreate(char *s)$/;"	f	typeref:typename:void
cons	kernel/console.c	/^} cons;$/;"	v	typeref:struct:__anonb6393d190108
consoleinit	kernel/console.c	/^consoleinit(void)$/;"	f	typeref:typename:void
consoleintr	kernel/console.c	/^consoleintr(int c)$/;"	f	typeref:typename:void
consoleread	kernel/console.c	/^consoleread(int user_dst, uint64 dst, int n)$/;"	f	typeref:typename:int
consolewrite	kernel/console.c	/^consolewrite(int user_src, uint64 src, int n)$/;"	f	typeref:typename:int
consputc	kernel/console.c	/^consputc(int c)$/;"	f	typeref:typename:void
cont	gradelib.py	/^    def cont(self):$/;"	m	class:GDBClient
context	gradelib.py	/^        class context:$/;"	c	function:shell_script.setup_call_on_line	file:
context	kernel/proc.h	/^  struct context context;      \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:context
context	kernel/proc.h	/^  struct context context;     \/\/ swtch() here to enter scheduler().$/;"	m	struct:cpu	typeref:struct:context
context	kernel/proc.h	/^struct context {$/;"	s
copyin	kernel/vm.c	/^copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)$/;"	f	typeref:typename:int
copyin	user/usertests.c	/^copyin(char *s)$/;"	f	typeref:typename:void
copyinstr	kernel/vm.c	/^copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)$/;"	f	typeref:typename:int
copyinstr1	user/usertests.c	/^copyinstr1(char *s)$/;"	f	typeref:typename:void
copyinstr2	user/usertests.c	/^copyinstr2(char *s)$/;"	f	typeref:typename:void
copyinstr3	user/usertests.c	/^copyinstr3(char *s)$/;"	f	typeref:typename:void
copyout	kernel/vm.c	/^copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)$/;"	f	typeref:typename:int
copyout	user/usertests.c	/^copyout(char *s)$/;"	f	typeref:typename:void
countfree	user/usertests.c	/^countfree()$/;"	f	typeref:typename:int
cpu	kernel/proc.h	/^struct cpu {$/;"	s
cpu	kernel/spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:cpu *
cpuid	kernel/proc.c	/^cpuid()$/;"	f	typeref:typename:int
cpus	kernel/proc.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu[]
create	kernel/sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	typeref:struct:inode *	file:
createdelete	user/usertests.c	/^createdelete(char *s)$/;"	f	typeref:typename:void
createtest	user/usertests.c	/^createtest(char *s)$/;"	f	typeref:typename:void
cso	kernel/e1000_dev.h	/^  uint8 cso;$/;"	m	struct:tx_desc	typeref:typename:uint8
css	kernel/e1000_dev.h	/^  uint8 css;$/;"	m	struct:tx_desc	typeref:typename:uint8
csum	kernel/e1000_dev.h	/^  uint16 csum;       \/* Packet checksum *\/$/;"	m	struct:rx_desc	typeref:typename:uint16
cwd	kernel/proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:inode *
data	kernel/buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf	typeref:typename:uchar[]
data	kernel/pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	typeref:typename:char[]	file:
decode_qname	user/nettests.c	/^decode_qname(char *qn, int max)$/;"	f	typeref:typename:void	file:
desc	kernel/virtio_disk.c	/^  struct virtq_desc *desc;$/;"	m	struct:disk	typeref:struct:virtq_desc *	file:
dev	kernel/buf.h	/^  uint dev;$/;"	m	struct:buf	typeref:typename:uint
dev	kernel/file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode	typeref:typename:uint
dev	kernel/log.c	/^  int dev;$/;"	m	struct:log	typeref:typename:int	file:
dev	kernel/stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat	typeref:typename:int
devintr	kernel/trap.c	/^devintr()$/;"	f	typeref:typename:int
devsw	kernel/file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw[]
devsw	kernel/file.h	/^struct devsw {$/;"	s
dhost	kernel/net.h	/^  uint8  dhost[ETHADDR_LEN];$/;"	m	struct:eth	typeref:typename:uint8[]
die	mkfs/mkfs.c	/^die(const char *s)$/;"	f	typeref:typename:void
digits	kernel/printf.c	/^static char digits[] = "0123456789abcdef";$/;"	v	typeref:typename:char[]	file:
digits	user/printf.c	/^static char digits[] = "0123456789ABCDEF";$/;"	v	typeref:typename:char[]	file:
dinode	kernel/fs.h	/^struct dinode {$/;"	s
dirent	kernel/fs.h	/^struct dirent {$/;"	s
dirfile	user/usertests.c	/^dirfile(char *s)$/;"	f	typeref:typename:void
dirlink	kernel/fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f	typeref:typename:int
dirlookup	kernel/fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f	typeref:struct:inode *
dirtest	user/usertests.c	/^void dirtest(char *s)$/;"	f	typeref:typename:void
disk	kernel/buf.h	/^  int disk;    \/\/ does disk "own" buf?$/;"	m	struct:buf	typeref:typename:int
disk	kernel/virtio_disk.c	/^static struct disk {$/;"	s	file:
disk	kernel/virtio_disk.c	/^} disk;$/;"	v	typeref:struct:disk
diskfull	user/usertests.c	/^diskfull(char *s)$/;"	f	typeref:typename:void
dns	kernel/net.h	/^struct dns {$/;"	s
dns	user/nettests.c	/^dns()$/;"	f	typeref:typename:void	file:
dns_data	kernel/net.h	/^struct dns_data {$/;"	s
dns_question	kernel/net.h	/^struct dns_question {$/;"	s
dns_rep	user/nettests.c	/^dns_rep(uint8 *ibuf, int cc)$/;"	f	typeref:typename:void	file:
dns_req	user/nettests.c	/^dns_req(uint8 *obuf)$/;"	f	typeref:typename:int	file:
do_rand	user/grind.c	/^do_rand(unsigned long *ctx)$/;"	f	typeref:typename:int
dport	kernel/net.h	/^  uint16 dport; \/\/ destination port$/;"	m	struct:udp	typeref:typename:uint16
drivetests	user/usertests.c	/^drivetests(int quick, int continuous, char *justone) {$/;"	f	typeref:typename:int
e	kernel/console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anonb6393d190108	typeref:typename:uint	file:
e1000_init	kernel/e1000.c	/^e1000_init(uint32 *xregs)$/;"	f	typeref:typename:void
e1000_intr	kernel/e1000.c	/^e1000_intr(void)$/;"	f	typeref:typename:void
e1000_lock	kernel/e1000.c	/^struct spinlock e1000_lock;$/;"	v	typeref:struct:spinlock
e1000_recv	kernel/e1000.c	/^e1000_recv(void)$/;"	f	typeref:typename:void	file:
e1000_transmit	kernel/e1000.c	/^e1000_transmit(struct mbuf *m)$/;"	f	typeref:typename:int
eargv	user/sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
efile	user/sh.c	/^  char *efile;$/;"	m	struct:redircmd	typeref:typename:char *	file:
ehsize	kernel/elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
either_copyin	kernel/proc.c	/^either_copyin(void *dst, int user_src, uint64 src, uint64 len)$/;"	f	typeref:typename:int
either_copyout	kernel/proc.c	/^either_copyout(int user_dst, uint64 dst, void *src, uint64 len)$/;"	f	typeref:typename:int
elf	kernel/elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr	typeref:typename:uchar[12]
elfhdr	kernel/elf.h	/^struct elfhdr {$/;"	s
encode_qname	user/nettests.c	/^encode_qname(char *qn, char *host)$/;"	f	typeref:typename:void	file:
end	kernel/kernel.ld	/^  PROVIDE(end = .);$/;"	s	assignment:provide
end	user/user.ld	/^  PROVIDE(end = .);$/;"	s	assignment:provide
end_op	kernel/log.c	/^end_op(void)$/;"	f	typeref:typename:void
end_part	gradelib.py	/^def end_part(name):$/;"	f
entry	kernel/elf.h	/^  uint64 entry;$/;"	m	struct:elfhdr	typeref:typename:uint64
entry	user/usys.pl	/^sub entry {$/;"	s
epc	kernel/proc.h	/^  \/*  24 *\/ uint64 epc;           \/\/ saved user program counter$/;"	m	struct:trapframe	typeref:typename:uint64
errors	kernel/e1000_dev.h	/^  uint8 errors;      \/* Descriptor Errors *\/$/;"	m	struct:rx_desc	typeref:typename:uint8
etext	kernel/kernel.ld	/^    PROVIDE(etext = .);$/;"	s	section:.text	assignment:provide
eth	kernel/net.h	/^struct eth {$/;"	s
exec	kernel/exec.c	/^exec(char *path, char **argv)$/;"	f	typeref:typename:int
execcmd	user/sh.c	/^execcmd(void)$/;"	f	typeref:struct:cmd *
execcmd	user/sh.c	/^struct execcmd {$/;"	s	file:
execout	user/usertests.c	/^execout(char *s)$/;"	f	typeref:typename:void
exectest	user/usertests.c	/^exectest(char *s)$/;"	f	typeref:typename:void
exit	kernel/proc.c	/^exit(int status)$/;"	f	typeref:typename:void
exit	user/initcode.S	/^exit:$/;"	l
exitiputtest	user/usertests.c	/^exitiputtest(char *s)$/;"	f	typeref:typename:void
exitwait	user/usertests.c	/^exitwait(char *s)$/;"	f	typeref:typename:void
f	user/usertests.c	/^  void (*f)(char *);$/;"	m	struct:test	typeref:typename:void (*)(char *)	file:
fd	user/sh.c	/^  int fd;$/;"	m	struct:redircmd	typeref:typename:int	file:
fdalloc	kernel/sysfile.c	/^fdalloc(struct file *f)$/;"	f	typeref:typename:int	file:
fetchaddr	kernel/syscall.c	/^fetchaddr(uint64 addr, uint64 *ip)$/;"	f	typeref:typename:int
fetchstr	kernel/syscall.c	/^fetchstr(uint64 addr, char *buf, int max)$/;"	f	typeref:typename:int
file	kernel/file.c	/^  struct file file[NFILE];$/;"	m	struct:__anonc1f1ee260108	typeref:struct:file[]	file:
file	kernel/file.h	/^struct file {$/;"	s
file	user/sh.c	/^  char *file;$/;"	m	struct:redircmd	typeref:typename:char *	file:
filealloc	kernel/file.c	/^filealloc(void)$/;"	f	typeref:struct:file *
fileclose	kernel/file.c	/^fileclose(struct file *f)$/;"	f	typeref:typename:void
filedup	kernel/file.c	/^filedup(struct file *f)$/;"	f	typeref:struct:file *
fileinit	kernel/file.c	/^fileinit(void)$/;"	f	typeref:typename:void
fileno	gradelib.py	/^    def fileno(self):$/;"	m	class:GDBClient
fileno	gradelib.py	/^    def fileno(self):$/;"	m	class:QEMU
fileread	kernel/file.c	/^fileread(struct file *f, uint64 addr, int n)$/;"	f	typeref:typename:int
filestat	kernel/file.c	/^filestat(struct file *f, uint64 addr)$/;"	f	typeref:typename:int
filesz	kernel/elf.h	/^  uint64 filesz;$/;"	m	struct:proghdr	typeref:typename:uint64
filewrite	kernel/file.c	/^filewrite(struct file *f, uint64 addr, int n)$/;"	f	typeref:typename:int
findslot	kernel/spinlock.c	/^findslot(struct spinlock *lk) {$/;"	f	typeref:typename:void	file:
flags	kernel/elf.h	/^  uint flags;$/;"	m	struct:elfhdr	typeref:typename:uint
flags	kernel/elf.h	/^  uint32 flags;$/;"	m	struct:proghdr	typeref:typename:uint32
flags	kernel/virtio.h	/^  uint16 flags; \/\/ always zero$/;"	m	struct:virtq_avail	typeref:typename:uint16
flags	kernel/virtio.h	/^  uint16 flags; \/\/ always zero$/;"	m	struct:virtq_used	typeref:typename:uint16
flags	kernel/virtio.h	/^  uint16 flags;$/;"	m	struct:virtq_desc	typeref:typename:uint16
flags2perm	kernel/exec.c	/^int flags2perm(int flags)$/;"	f	typeref:typename:int
fmtname	user/ls.c	/^fmtname(char *path)$/;"	f	typeref:typename:char *
fork	kernel/proc.c	/^fork(void)$/;"	f	typeref:typename:int
fork1	user/sh.c	/^fork1(void)$/;"	f	typeref:typename:int
forkfork	user/usertests.c	/^forkfork(char *s)$/;"	f	typeref:typename:void
forkforkfork	user/usertests.c	/^forkforkfork(char *s)$/;"	f	typeref:typename:void
forkret	kernel/proc.c	/^forkret(void)$/;"	f	typeref:typename:void
forktest	user/forktest.c	/^forktest(void)$/;"	f	typeref:typename:void
forktest	user/usertests.c	/^forktest(char *s)$/;"	f	typeref:typename:void
fourfiles	user/usertests.c	/^fourfiles(char *s)$/;"	f	typeref:typename:void
fourteen	user/usertests.c	/^fourteen(char *s)$/;"	f	typeref:typename:void
fprintf	user/printf.c	/^fprintf(int fd, const char *fmt, ...)$/;"	f	typeref:typename:void
free	kernel/virtio_disk.c	/^  char free[NUM];  \/\/ is a descriptor free?$/;"	m	struct:disk	typeref:typename:char[]	file:
free	user/umalloc.c	/^free(void *ap)$/;"	f	typeref:typename:void
free_chain	kernel/virtio_disk.c	/^free_chain(int i)$/;"	f	typeref:typename:void	file:
free_desc	kernel/virtio_disk.c	/^free_desc(int i)$/;"	f	typeref:typename:void	file:
freeblock	mkfs/mkfs.c	/^uint freeblock;$/;"	v	typeref:typename:uint
freeinode	mkfs/mkfs.c	/^uint freeinode = 1;$/;"	v	typeref:typename:uint
freelist	kernel/kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon3c3fa87c0108	typeref:struct:run *	file:
freelock	kernel/spinlock.c	/^freelock(struct spinlock *lk)$/;"	f	typeref:typename:void
freep	user/umalloc.c	/^static Header *freep;$/;"	v	typeref:typename:Header *	file:
freeproc	kernel/proc.c	/^freeproc(struct proc *p)$/;"	f	typeref:typename:void	file:
freerange	kernel/kalloc.c	/^freerange(void *pa_start, void *pa_end)$/;"	f	typeref:typename:void
freewalk	kernel/vm.c	/^freewalk(pagetable_t pagetable)$/;"	f	typeref:typename:void
fs.img	Makefile	/^fs.img: mkfs\/mkfs README $(UEXTRA) $(UPROGS)$/;"	t
fsfd	mkfs/mkfs.c	/^int fsfd;$/;"	v	typeref:typename:int
fsfull	user/usertests.c	/^fsfull()$/;"	f	typeref:typename:void
fsinit	kernel/fs.c	/^fsinit(int dev) {$/;"	f	typeref:typename:void
ftable	kernel/file.c	/^} ftable;$/;"	v	typeref:struct:__anonc1f1ee260108
get_current_test	gradelib.py	/^def get_current_test():$/;"	f
get_gdb_port	gradelib.py	/^    def get_gdb_port():$/;"	m	class:QEMU
getcmd	user/sh.c	/^getcmd(char *buf, int nbuf)$/;"	f	typeref:typename:int
gets	user/ulib.c	/^gets(char *buf, int max)$/;"	f	typeref:typename:char *
gettoken	user/sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f	typeref:typename:int
go	user/grind.c	/^go(int which_child)$/;"	f	typeref:typename:void
gp	kernel/proc.h	/^  \/*  56 *\/ uint64 gp;$/;"	m	struct:trapframe	typeref:typename:uint64
grade	Makefile	/^grade:$/;"	t
grep	user/grep.c	/^grep(char *pattern, int fd)$/;"	f	typeref:typename:void
growproc	kernel/proc.c	/^growproc(int n)$/;"	f	typeref:typename:int
handle_output	gradelib.py	/^        def handle_output(output):$/;"	f	function:call_on_line.setup_call_on_line	file:
handle_output	gradelib.py	/^        def handle_output(output):$/;"	f	function:shell_script.setup_call_on_line	file:
handle_read	gradelib.py	/^    def handle_read(self):$/;"	m	class:GDBClient
handle_read	gradelib.py	/^    def handle_read(self):$/;"	m	class:QEMU
head	kernel/bio.c	/^  struct buf head;$/;"	m	struct:__anon6a7165400108	typeref:struct:buf	file:
head	kernel/net.h	/^  char         *head; \/\/ the current start position of the buffer$/;"	m	struct:mbuf	typeref:typename:char *
head	kernel/net.h	/^  struct mbuf *head;  \/\/ the first element in the queue$/;"	m	struct:mbufq	typeref:struct:mbuf *
header	user/umalloc.c	/^union header {$/;"	u	file:
hln	kernel/net.h	/^  uint8  hln; \/\/ length of hardware address$/;"	m	struct:arp	typeref:typename:uint8
holding	kernel/spinlock.c	/^holding(struct spinlock *lk)$/;"	f	typeref:typename:int
holdingsleep	kernel/sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f	typeref:typename:int
hrd	kernel/net.h	/^  uint16 hrd; \/\/ format of hardware address$/;"	m	struct:arp	typeref:typename:uint16
htonl	kernel/net.h	/^#define htonl /;"	d
htons	kernel/net.h	/^#define htons /;"	d
ialloc	kernel/fs.c	/^ialloc(uint dev, short type)$/;"	f	typeref:struct:inode *
ialloc	mkfs/mkfs.c	/^ialloc(ushort type)$/;"	f	typeref:typename:uint
iappend	mkfs/mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f	typeref:typename:void
id	kernel/net.h	/^  uint16 id;  \/\/ request ID$/;"	m	struct:dns	typeref:typename:uint16
id	kernel/virtio.h	/^  uint32 id;   \/\/ index of start of completed descriptor chain$/;"	m	struct:virtq_used_elem	typeref:typename:uint32
idup	kernel/fs.c	/^idup(struct inode *ip)$/;"	f	typeref:struct:inode *
idx	kernel/virtio.h	/^  uint16 idx;   \/\/ device increments when it adds a ring[] entry$/;"	m	struct:virtq_used	typeref:typename:uint16
idx	kernel/virtio.h	/^  uint16 idx;   \/\/ driver will write ring[idx] next$/;"	m	struct:virtq_avail	typeref:typename:uint16
iget	kernel/fs.c	/^iget(uint dev, uint inum)$/;"	f	typeref:struct:inode *	file:
iinit	kernel/fs.c	/^iinit()$/;"	f	typeref:typename:void
ilock	kernel/fs.c	/^ilock(struct inode *ip)$/;"	f	typeref:typename:void
in_cksum	kernel/net.c	/^in_cksum(const unsigned char *addr, int len)$/;"	f	typeref:typename:unsigned short	file:
info	kernel/virtio_disk.c	/^  } info[NUM];$/;"	m	struct:disk	typeref:struct:disk::__anon0ecc7a2d0108[]	file:
init	user/initcode.S	/^init:$/;"	l
initcode	kernel/proc.c	/^uchar initcode[] = {$/;"	v	typeref:typename:uchar[]
initlock	kernel/spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f	typeref:typename:void
initlog	kernel/log.c	/^initlog(int dev, struct superblock *sb)$/;"	f	typeref:typename:void
initproc	kernel/proc.c	/^struct proc *initproc;$/;"	v	typeref:struct:proc *
initsleeplock	kernel/sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f	typeref:typename:void
ino	kernel/stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat	typeref:typename:uint
inode	kernel/file.h	/^struct inode {$/;"	s
inode	kernel/fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon033c111f0108	typeref:struct:inode[]	file:
inodestart	kernel/fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock	typeref:typename:uint
install_trans	kernel/log.c	/^install_trans(int recovering)$/;"	f	typeref:typename:void	file:
intena	kernel/proc.h	/^  int intena;                 \/\/ Were interrupts enabled before push_off()?$/;"	m	struct:cpu	typeref:typename:int
intr_get	kernel/riscv.h	/^intr_get()$/;"	f	typeref:typename:int
intr_off	kernel/riscv.h	/^intr_off()$/;"	f	typeref:typename:void
intr_on	kernel/riscv.h	/^intr_on()$/;"	f	typeref:typename:void
inum	kernel/file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode	typeref:typename:uint
inum	kernel/fs.h	/^  ushort inum;$/;"	m	struct:dirent	typeref:typename:ushort
inum	user/usertests.c	/^    ushort inum;$/;"	m	struct:concreate::__anon2469bfd60b08	typeref:typename:ushort	file:
ip	kernel/file.h	/^  struct inode *ip;  \/\/ FD_INODE and FD_DEVICE$/;"	m	struct:file	typeref:struct:inode *
ip	kernel/net.h	/^struct ip {$/;"	s
ip_dst	kernel/net.h	/^  uint32 ip_src, ip_dst;$/;"	m	struct:ip	typeref:typename:uint32
ip_id	kernel/net.h	/^  uint16 ip_id;  \/\/ identification$/;"	m	struct:ip	typeref:typename:uint16
ip_len	kernel/net.h	/^  uint16 ip_len; \/\/ total length$/;"	m	struct:ip	typeref:typename:uint16
ip_off	kernel/net.h	/^  uint16 ip_off; \/\/ fragment offset field$/;"	m	struct:ip	typeref:typename:uint16
ip_p	kernel/net.h	/^  uint8  ip_p;   \/\/ protocol$/;"	m	struct:ip	typeref:typename:uint8
ip_src	kernel/net.h	/^  uint32 ip_src, ip_dst;$/;"	m	struct:ip	typeref:typename:uint32
ip_sum	kernel/net.h	/^  uint16 ip_sum; \/\/ checksum$/;"	m	struct:ip	typeref:typename:uint16
ip_tos	kernel/net.h	/^  uint8  ip_tos; \/\/ type of service$/;"	m	struct:ip	typeref:typename:uint8
ip_ttl	kernel/net.h	/^  uint8  ip_ttl; \/\/ time to live$/;"	m	struct:ip	typeref:typename:uint8
ip_vhl	kernel/net.h	/^  uint8  ip_vhl; \/\/ version << 4 | header length >> 2$/;"	m	struct:ip	typeref:typename:uint8
iput	kernel/fs.c	/^iput(struct inode *ip)$/;"	f	typeref:typename:void
iputtest	user/usertests.c	/^iputtest(char *s)$/;"	f	typeref:typename:void
iref	user/usertests.c	/^iref(char *s)$/;"	f	typeref:typename:void
isdirempty	kernel/sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	typeref:typename:int	file:
itable	kernel/fs.c	/^} itable;$/;"	v	typeref:struct:__anon033c111f0108
iter	user/grind.c	/^iter()$/;"	f	typeref:typename:void
itrunc	kernel/fs.c	/^itrunc(struct inode *ip)$/;"	f	typeref:typename:void
iunlock	kernel/fs.c	/^iunlock(struct inode *ip)$/;"	f	typeref:typename:void
iunlockput	kernel/fs.c	/^iunlockput(struct inode *ip)$/;"	f	typeref:typename:void
iupdate	kernel/fs.c	/^iupdate(struct inode *ip)$/;"	f	typeref:typename:void
kalloc	kernel/kalloc.c	/^kalloc(void)$/;"	f	typeref:typename:void *
kernel_hartid	kernel/proc.h	/^  \/*  32 *\/ uint64 kernel_hartid; \/\/ saved kernel tp$/;"	m	struct:trapframe	typeref:typename:uint64
kernel_pagetable	kernel/vm.c	/^pagetable_t kernel_pagetable;$/;"	v	typeref:typename:pagetable_t
kernel_satp	kernel/proc.h	/^  \/*   0 *\/ uint64 kernel_satp;   \/\/ kernel page table$/;"	m	struct:trapframe	typeref:typename:uint64
kernel_sp	kernel/proc.h	/^  \/*   8 *\/ uint64 kernel_sp;     \/\/ top of process's kernel stack$/;"	m	struct:trapframe	typeref:typename:uint64
kernel_trap	kernel/proc.h	/^  \/*  16 *\/ uint64 kernel_trap;   \/\/ usertrap()$/;"	m	struct:trapframe	typeref:typename:uint64
kerneltrap	kernel/trap.c	/^kerneltrap()$/;"	f	typeref:typename:void
kernelvec	kernel/kernelvec.S	/^kernelvec:$/;"	l
kernmem	user/usertests.c	/^kernmem(char *s)$/;"	f	typeref:typename:void
kfree	kernel/kalloc.c	/^kfree(void *pa)$/;"	f	typeref:typename:void
kill	gradelib.py	/^    def kill(self):$/;"	m	class:QEMU
kill	kernel/proc.c	/^kill(int pid)$/;"	f	typeref:typename:int
killed	kernel/proc.c	/^killed(struct proc *p)$/;"	f	typeref:typename:int
killed	kernel/proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc	typeref:typename:int
killstatus	user/usertests.c	/^killstatus(char *s)$/;"	f	typeref:typename:void
kinit	kernel/kalloc.c	/^kinit()$/;"	f	typeref:typename:void
kmem	kernel/kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon3c3fa87c0108
kstack	kernel/proc.h	/^  uint64 kstack;               \/\/ Virtual address of kernel stack$/;"	m	struct:proc	typeref:typename:uint64
kvminit	kernel/vm.c	/^kvminit(void)$/;"	f	typeref:typename:void
kvminithart	kernel/vm.c	/^kvminithart()$/;"	f	typeref:typename:void
kvmmake	kernel/vm.c	/^kvmmake(void)$/;"	f	typeref:typename:pagetable_t
kvmmap	kernel/vm.c	/^kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)$/;"	f	typeref:typename:void
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
len	kernel/net.h	/^  uint16 len;$/;"	m	struct:dns_data	typeref:typename:uint16
len	kernel/net.h	/^  unsigned int len;   \/\/ the length of the buffer$/;"	m	struct:mbuf	typeref:typename:unsigned int
len	kernel/virtio.h	/^  uint32 len;$/;"	m	struct:virtq_desc	typeref:typename:uint32
len	kernel/virtio.h	/^  uint32 len;$/;"	m	struct:virtq_used_elem	typeref:typename:uint32
length	kernel/e1000_dev.h	/^  uint16 length;     \/* Length of data DMAed into data buffer *\/$/;"	m	struct:rx_desc	typeref:typename:uint16
length	kernel/e1000_dev.h	/^  uint16 length;$/;"	m	struct:tx_desc	typeref:typename:uint16
lh	kernel/log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:logheader	file:
linktest	user/usertests.c	/^linktest(char *s)$/;"	f	typeref:typename:void
linkunlink	user/usertests.c	/^linkunlink(char *s)$/;"	f	typeref:typename:void
listcmd	user/sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
listcmd	user/sh.c	/^struct listcmd {$/;"	s	file:
lk	kernel/sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:spinlock
loadseg	kernel/exec.c	/^loadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz)$/;"	f	typeref:typename:int	file:
local_ip	kernel/net.c	/^static uint32 local_ip = MAKE_IP_ADDR(10, 0, 2, 15); \/\/ qemu's idea of the guest IP$/;"	v	typeref:typename:uint32	file:
local_mac	kernel/net.c	/^static uint8 local_mac[ETHADDR_LEN] = { 0x52, 0x54, 0x00, 0x12, 0x34, 0x56 };$/;"	v	typeref:typename:uint8[]	file:
lock	kernel/bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon6a7165400108	typeref:struct:spinlock	file:
lock	kernel/buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:sleeplock
lock	kernel/console.c	/^  struct spinlock lock;$/;"	m	struct:__anonb6393d190108	typeref:struct:spinlock	file:
lock	kernel/file.c	/^  struct spinlock lock;$/;"	m	struct:__anonc1f1ee260108	typeref:struct:spinlock	file:
lock	kernel/file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:sleeplock
lock	kernel/fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon033c111f0108	typeref:struct:spinlock	file:
lock	kernel/kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon3c3fa87c0108	typeref:struct:spinlock	file:
lock	kernel/log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:spinlock	file:
lock	kernel/pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:spinlock	file:
lock	kernel/printf.c	/^  struct spinlock lock;$/;"	m	struct:__anonef4e5b790108	typeref:struct:spinlock	file:
lock	kernel/proc.h	/^  struct spinlock lock;$/;"	m	struct:proc	typeref:struct:spinlock
lock	kernel/sysnet.c	/^  struct spinlock lock; \/\/ protects the rxq$/;"	m	struct:sock	typeref:struct:spinlock	file:
lock	kernel/sysnet.c	/^static struct spinlock lock;$/;"	v	typeref:struct:spinlock	file:
lock_locks	kernel/spinlock.c	/^struct spinlock lock_locks;$/;"	v	typeref:struct:spinlock
locked	kernel/sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock	typeref:typename:uint
locked	kernel/spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock	typeref:typename:uint
locking	kernel/printf.c	/^  int locking;$/;"	m	struct:__anonef4e5b790108	typeref:typename:int	file:
locks	kernel/spinlock.c	/^static struct spinlock *locks[NLOCK];$/;"	v	typeref:struct:spinlock * []	file:
log	kernel/log.c	/^struct log log;$/;"	v	typeref:struct:log
log	kernel/log.c	/^struct log {$/;"	s	file:
log_write	kernel/log.c	/^log_write(struct buf *b)$/;"	f	typeref:typename:void
logheader	kernel/log.c	/^struct logheader {$/;"	s	file:
logstart	kernel/fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock	typeref:typename:uint
lport	kernel/sysnet.c	/^  uint16 lport;      \/\/ the local UDP port number$/;"	m	struct:sock	typeref:typename:uint16	file:
ls	user/ls.c	/^ls(char *path)$/;"	f	typeref:typename:void
machine	kernel/elf.h	/^  ushort machine;$/;"	m	struct:elfhdr	typeref:typename:ushort
magic	kernel/elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr	typeref:typename:uint
magic	kernel/fs.h	/^  uint magic;        \/\/ Must be FSMAGIC$/;"	m	struct:superblock	typeref:typename:uint
main	kernel/main.c	/^main()$/;"	f	typeref:typename:void
main	mkfs/mkfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/cat.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/echo.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/forktest.c	/^main(void)$/;"	f	typeref:typename:int
main	user/grep.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/grind.c	/^main()$/;"	f	typeref:typename:int
main	user/init.c	/^main(void)$/;"	f	typeref:typename:int
main	user/kill.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
main	user/ln.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/ls.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/mkdir.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/nettests.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/pingpong.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/rm.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/sh.c	/^main(void)$/;"	f	typeref:typename:int
main	user/stressfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/usertests.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/wc.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/zombie.c	/^main(void)$/;"	f	typeref:typename:int
major	kernel/file.h	/^  short major;       \/\/ FD_DEVICE$/;"	m	struct:file	typeref:typename:short
major	kernel/file.h	/^  short major;$/;"	m	struct:inode	typeref:typename:short
major	kernel/file.h	/^#define major(/;"	d
major	kernel/fs.h	/^  short major;          \/\/ Major device number (T_DEVICE only)$/;"	m	struct:dinode	typeref:typename:short
make	gradelib.py	/^def make(*target):$/;"	f
malloc	user/umalloc.c	/^malloc(uint nbytes)$/;"	f	typeref:typename:void *
manywrites	user/usertests.c	/^manywrites(char *s)$/;"	f	typeref:typename:void
mappages	kernel/vm.c	/^mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)$/;"	f	typeref:typename:int
match	gradelib.py	/^    def match(self, *args, **kwargs):$/;"	m	class:Runner
match	user/grep.c	/^match(char *re, char *text)$/;"	f	typeref:typename:int
matchhere	user/grep.c	/^int matchhere(char *re, char *text)$/;"	f	typeref:typename:int
matchstar	user/grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f	typeref:typename:int
maybe_unlink	gradelib.py	/^def maybe_unlink(*paths):$/;"	f
mbuf	kernel/net.h	/^struct mbuf {$/;"	s
mbufalloc	kernel/net.c	/^mbufalloc(unsigned int headroom)$/;"	f	typeref:struct:mbuf *
mbuffree	kernel/net.c	/^mbuffree(struct mbuf *m)$/;"	f	typeref:typename:void
mbufpull	kernel/net.c	/^mbufpull(struct mbuf *m, unsigned int len)$/;"	f	typeref:typename:char *
mbufpullhdr	kernel/net.h	/^#define mbufpullhdr(/;"	d
mbufpush	kernel/net.c	/^mbufpush(struct mbuf *m, unsigned int len)$/;"	f	typeref:typename:char *
mbufpushhdr	kernel/net.h	/^#define mbufpushhdr(/;"	d
mbufput	kernel/net.c	/^mbufput(struct mbuf *m, unsigned int len)$/;"	f	typeref:typename:char *
mbufputhdr	kernel/net.h	/^#define mbufputhdr(/;"	d
mbufq	kernel/net.h	/^struct mbufq {$/;"	s
mbufq_empty	kernel/net.c	/^mbufq_empty(struct mbufq *q)$/;"	f	typeref:typename:int
mbufq_init	kernel/net.c	/^mbufq_init(struct mbufq *q)$/;"	f	typeref:typename:void
mbufq_pophead	kernel/net.c	/^mbufq_pophead(struct mbufq *q)$/;"	f	typeref:struct:mbuf *
mbufq_pushtail	kernel/net.c	/^mbufq_pushtail(struct mbufq *q, struct mbuf *m)$/;"	f	typeref:typename:void
mbuftrim	kernel/net.c	/^mbuftrim(struct mbuf *m, unsigned int len)$/;"	f	typeref:typename:char *
mbuftrimhdr	kernel/net.h	/^#define mbuftrimhdr(/;"	d
mem	user/usertests.c	/^mem(char *s)$/;"	f	typeref:typename:void
memcmp	kernel/string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f	typeref:typename:int
memcmp	user/ulib.c	/^memcmp(const void *s1, const void *s2, uint n)$/;"	f	typeref:typename:int
memcpy	kernel/string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memcpy	user/ulib.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memmove	kernel/string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memmove	user/ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f	typeref:typename:void *
memset	kernel/string.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memset	user/ulib.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memsz	kernel/elf.h	/^  uint64 memsz;$/;"	m	struct:proghdr	typeref:typename:uint64
min	kernel/fs.c	/^#define min(/;"	d	file:
min	mkfs/mkfs.c	/^#define min(/;"	d	file:
minor	kernel/file.h	/^  short minor;$/;"	m	struct:inode	typeref:typename:short
minor	kernel/file.h	/^#define minor(/;"	d
minor	kernel/fs.h	/^  short minor;          \/\/ Minor device number (T_DEVICE only)$/;"	m	struct:dinode	typeref:typename:short
mkdev	kernel/file.h	/^#define	mkdev(/;"	d
mkfs/mkfs	Makefile	/^mkfs\/mkfs: mkfs\/mkfs.c $K\/fs.h $K\/param.h$/;"	t
mode	user/sh.c	/^  int mode;$/;"	m	struct:redircmd	typeref:typename:int	file:
morecore	user/umalloc.c	/^morecore(uint nu)$/;"	f	typeref:typename:Header *	file:
mycpu	kernel/proc.c	/^mycpu(void)$/;"	f	typeref:struct:cpu *
myproc	kernel/proc.c	/^myproc(void)$/;"	f	typeref:struct:proc *
n	gradelib.py	/^            n = 0$/;"	v	class:shell_script.setup_call_on_line.context
n	kernel/log.c	/^  int n;$/;"	m	struct:logheader	typeref:typename:int	file:
name	kernel/fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent	typeref:typename:char[]
name	kernel/proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc	typeref:typename:char[16]
name	kernel/sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock	typeref:typename:char *
name	kernel/spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock	typeref:typename:char *
name	user/usertests.c	/^    char name[DIRSIZ];$/;"	m	struct:concreate::__anon2469bfd60b08	typeref:typename:char[]	file:
namecmp	kernel/fs.c	/^namecmp(const char *s, const char *t)$/;"	f	typeref:typename:int
namei	kernel/fs.c	/^namei(char *path)$/;"	f	typeref:struct:inode *
nameiparent	kernel/fs.c	/^nameiparent(char *path, char *name)$/;"	f	typeref:struct:inode *
namex	kernel/fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	typeref:struct:inode *	file:
nbitmap	mkfs/mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v	typeref:typename:int
nblocks	kernel/fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock	typeref:typename:uint
nblocks	mkfs/mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v	typeref:typename:int
net_rx	kernel/net.c	/^void net_rx(struct mbuf *m)$/;"	f	typeref:typename:void
net_rx_arp	kernel/net.c	/^net_rx_arp(struct mbuf *m)$/;"	f	typeref:typename:void	file:
net_rx_ip	kernel/net.c	/^net_rx_ip(struct mbuf *m)$/;"	f	typeref:typename:void	file:
net_rx_udp	kernel/net.c	/^net_rx_udp(struct mbuf *m, uint16 len, struct ip *iphdr)$/;"	f	typeref:typename:void	file:
net_tx_arp	kernel/net.c	/^net_tx_arp(uint16 op, uint8 dmac[ETHADDR_LEN], uint32 dip)$/;"	f	typeref:typename:int	file:
net_tx_eth	kernel/net.c	/^net_tx_eth(struct mbuf *m, uint16 ethtype)$/;"	f	typeref:typename:void	file:
net_tx_ip	kernel/net.c	/^net_tx_ip(struct mbuf *m, uint8 proto, uint32 dip)$/;"	f	typeref:typename:void	file:
net_tx_udp	kernel/net.c	/^net_tx_udp(struct mbuf *m, uint32 dip,$/;"	f	typeref:typename:void
next	kernel/buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf *
next	kernel/kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run *	file:
next	kernel/net.h	/^  struct mbuf  *next; \/\/ the next mbuf in the chain$/;"	m	struct:mbuf	typeref:struct:mbuf *
next	kernel/sysnet.c	/^  struct sock *next; \/\/ the next socket in the list$/;"	m	struct:sock	typeref:struct:sock *	file:
next	kernel/virtio.h	/^  uint16 next;$/;"	m	struct:virtq_desc	typeref:typename:uint16
nextpid	kernel/proc.c	/^int nextpid = 1;$/;"	v	typeref:typename:int
ninodeblocks	mkfs/mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v	typeref:typename:int
ninodes	kernel/fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock	typeref:typename:uint
nlink	kernel/file.h	/^  short nlink;$/;"	m	struct:inode	typeref:typename:short
nlink	kernel/fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode	typeref:typename:short
nlink	kernel/stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat	typeref:typename:short
nlog	kernel/fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock	typeref:typename:uint
nlog	mkfs/mkfs.c	/^int nlog = LOGSIZE;$/;"	v	typeref:typename:int
nmeta	mkfs/mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v	typeref:typename:int
noff	kernel/proc.h	/^  int noff;                   \/\/ Depth of push_off() nesting.$/;"	m	struct:cpu	typeref:typename:int
nread	kernel/pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	typeref:typename:uint	file:
nscount	kernel/net.h	/^  uint16 nscount; \/\/ number of NS resource records in authority section$/;"	m	struct:dns	typeref:typename:uint16
ntohl	kernel/net.h	/^#define ntohl /;"	d
ntohs	kernel/net.h	/^#define ntohs /;"	d
nulterminate	user/sh.c	/^nulterminate(struct cmd *cmd)$/;"	f	typeref:struct:cmd *
nwrite	kernel/pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	typeref:typename:uint	file:
off	kernel/elf.h	/^  uint64 off;$/;"	m	struct:proghdr	typeref:typename:uint64
off	kernel/file.h	/^  uint off;          \/\/ FD_INODE$/;"	m	struct:file	typeref:typename:uint
ofile	kernel/proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:file * []
op	kernel/net.h	/^  uint16 op;  \/\/ operation$/;"	m	struct:arp	typeref:typename:uint16
opcode	kernel/net.h	/^  uint8 opcode: 4; $/;"	m	struct:dns	typeref:typename:uint8:4
openiputtest	user/usertests.c	/^openiputtest(char *s)$/;"	f	typeref:typename:void
opentest	user/usertests.c	/^opentest(char *s)$/;"	f	typeref:typename:void
ops	kernel/virtio_disk.c	/^  struct virtio_blk_req ops[NUM];$/;"	m	struct:disk	typeref:struct:virtio_blk_req[]	file:
outofinodes	user/usertests.c	/^outofinodes(char *s)$/;"	f	typeref:typename:void
outstanding	kernel/log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	typeref:typename:int	file:
paddr	kernel/elf.h	/^  uint64 paddr;$/;"	m	struct:proghdr	typeref:typename:uint64
pagetable	kernel/proc.h	/^  pagetable_t pagetable;       \/\/ User page table$/;"	m	struct:proc	typeref:typename:pagetable_t
pagetable_t	kernel/riscv.h	/^typedef uint64 *pagetable_t; \/\/ 512 PTEs$/;"	t	typeref:typename:uint64 *
panic	kernel/printf.c	/^panic(char *s)$/;"	f	typeref:typename:void
panic	user/sh.c	/^panic(char *s)$/;"	f	typeref:typename:void
panicked	kernel/printf.c	/^volatile int panicked = 0;$/;"	v	typeref:typename:volatile int
parent	kernel/proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc *
parseblock	user/sh.c	/^parseblock(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsecmd	user/sh.c	/^parsecmd(char *s)$/;"	f	typeref:struct:cmd *
parseexec	user/sh.c	/^parseexec(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseline	user/sh.c	/^parseline(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsepipe	user/sh.c	/^parsepipe(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseredirs	user/sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f	typeref:struct:cmd *
pci_init	kernel/pci.c	/^pci_init()$/;"	f	typeref:typename:void
pde_t	kernel/types.h	/^typedef uint64 pde_t;$/;"	t	typeref:typename:uint64
peek	user/sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f	typeref:typename:int
pgbug	user/usertests.c	/^pgbug(char *s)$/;"	f	typeref:typename:void
ph	Makefile	/^ph: notxv6\/ph.c$/;"	t
phentsize	kernel/elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
phnum	kernel/elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
phoff	kernel/elf.h	/^  uint64 phoff;$/;"	m	struct:elfhdr	typeref:typename:uint64
pid	kernel/memlayout.h	/^  int pid;  \/\/ Process ID$/;"	m	struct:usyscall	typeref:typename:int
pid	kernel/proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc	typeref:typename:int
pid	kernel/sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock	typeref:typename:int
pid_lock	kernel/proc.c	/^struct spinlock pid_lock;$/;"	v	typeref:struct:spinlock
ping	Makefile	/^ping:$/;"	t
ping	user/nettests.c	/^ping(uint16 sport, uint16 dport, int attempts)$/;"	f	typeref:typename:void	file:
ping	user/pingpong.c	/^ping(int *parent_to_child, int *child_to_parent) {$/;"	f	typeref:typename:void
pipe	kernel/file.h	/^  struct pipe *pipe; \/\/ FD_PIPE$/;"	m	struct:file	typeref:struct:pipe *
pipe	kernel/pipe.c	/^struct pipe {$/;"	s	file:
pipe1	user/usertests.c	/^pipe1(char *s)$/;"	f	typeref:typename:void
pipealloc	kernel/pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f	typeref:typename:int
pipeclose	kernel/pipe.c	/^pipeclose(struct pipe *pi, int writable)$/;"	f	typeref:typename:void
pipecmd	user/sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
pipecmd	user/sh.c	/^struct pipecmd {$/;"	s	file:
piperead	kernel/pipe.c	/^piperead(struct pipe *pi, uint64 addr, int n)$/;"	f	typeref:typename:int
pipewrite	kernel/pipe.c	/^pipewrite(struct pipe *pi, uint64 addr, int n)$/;"	f	typeref:typename:int
plic_claim	kernel/plic.c	/^plic_claim(void)$/;"	f	typeref:typename:int
plic_complete	kernel/plic.c	/^plic_complete(int irq)$/;"	f	typeref:typename:void
plicinit	kernel/plic.c	/^plicinit(void)$/;"	f	typeref:typename:void
plicinithart	kernel/plic.c	/^plicinithart(void)$/;"	f	typeref:typename:void
pln	kernel/net.h	/^  uint8  pln; \/\/ length of protocol address$/;"	m	struct:arp	typeref:typename:uint8
pong	user/pingpong.c	/^pong(int *parent_to_child, int *child_to_parent) {$/;"	f	typeref:typename:void
pop_off	kernel/spinlock.c	/^pop_off(void)$/;"	f	typeref:typename:void
post_make	gradelib.py	/^def post_make():$/;"	f
pr	kernel/printf.c	/^} pr;$/;"	v	typeref:struct:__anonef4e5b790108
pre_make	gradelib.py	/^def pre_make():$/;"	f
preempt	user/usertests.c	/^preempt(char *s)$/;"	f	typeref:typename:void
prev	kernel/buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf *
print	user/forktest.c	/^print(const char *s)$/;"	f	typeref:typename:void
print-gdbport	Makefile	/^print-gdbport:$/;"	t
printf	kernel/printf.c	/^printf(char *fmt, ...)$/;"	f	typeref:typename:void
printf	user/printf.c	/^printf(const char *fmt, ...)$/;"	f	typeref:typename:void
printfinit	kernel/printf.c	/^printfinit(void)$/;"	f	typeref:typename:void
printint	kernel/printf.c	/^printint(int xx, int base, int sign)$/;"	f	typeref:typename:void	file:
printint	user/printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	typeref:typename:void	file:
printptr	kernel/printf.c	/^printptr(uint64 x)$/;"	f	typeref:typename:void	file:
printptr	user/printf.c	/^printptr(int fd, uint64 x) {$/;"	f	typeref:typename:void	file:
pro	kernel/net.h	/^  uint16 pro; \/\/ format of protocol address$/;"	m	struct:arp	typeref:typename:uint16
proc	kernel/proc.c	/^struct proc proc[NPROC];$/;"	v	typeref:struct:proc[]
proc	kernel/proc.h	/^  struct proc *proc;          \/\/ The process running on this cpu, or null.$/;"	m	struct:cpu	typeref:struct:proc *
proc	kernel/proc.h	/^struct proc {$/;"	s
proc_freepagetable	kernel/proc.c	/^proc_freepagetable(pagetable_t pagetable, uint64 sz)$/;"	f	typeref:typename:void
proc_mapstacks	kernel/proc.c	/^proc_mapstacks(pagetable_t kpgtbl)$/;"	f	typeref:typename:void
proc_pagetable	kernel/proc.c	/^proc_pagetable(struct proc *p)$/;"	f	typeref:typename:pagetable_t
procdump	kernel/proc.c	/^procdump(void)$/;"	f	typeref:typename:void
procinit	kernel/proc.c	/^procinit(void)$/;"	f	typeref:typename:void
procstate	kernel/proc.h	/^enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
proghdr	kernel/elf.h	/^struct proghdr {$/;"	s
pte_t	kernel/riscv.h	/^typedef uint64 pte_t;$/;"	t	typeref:typename:uint64
ptr	user/umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon3d351ad10108	typeref:union:header *	file:
push_off	kernel/spinlock.c	/^push_off(void)$/;"	f	typeref:typename:void
putc	user/printf.c	/^putc(int fd, char c)$/;"	f	typeref:typename:void	file:
qclass	kernel/net.h	/^  uint16 qclass;$/;"	m	struct:dns_question	typeref:typename:uint16
qdcount	kernel/net.h	/^  uint16 qdcount; \/\/ number of question entries$/;"	m	struct:dns	typeref:typename:uint16
qemu	Makefile	/^qemu: $K\/kernel fs.img$/;"	t
qemu-gdb	Makefile	/^qemu-gdb: $K\/kernel .gdbinit fs.img$/;"	t
qr	kernel/net.h	/^  uint8 qr: 1;  \/\/ query\/response$/;"	m	struct:dns	typeref:typename:uint8:1
qtype	kernel/net.h	/^  uint16 qtype;$/;"	m	struct:dns_question	typeref:typename:uint16
quicktests	user/usertests.c	/^} quicktests[] = {$/;"	v	typeref:struct:test[]
r	grade-lab-net	/^r = Runner(save("xv6.out"))$/;"	v
r	kernel/console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anonb6393d190108	typeref:typename:uint	file:
r_mcounteren	kernel/riscv.h	/^r_mcounteren()$/;"	f	typeref:typename:uint64
r_medeleg	kernel/riscv.h	/^r_medeleg()$/;"	f	typeref:typename:uint64
r_mhartid	kernel/riscv.h	/^r_mhartid()$/;"	f	typeref:typename:uint64
r_mideleg	kernel/riscv.h	/^r_mideleg()$/;"	f	typeref:typename:uint64
r_mie	kernel/riscv.h	/^r_mie()$/;"	f	typeref:typename:uint64
r_mstatus	kernel/riscv.h	/^r_mstatus()$/;"	f	typeref:typename:uint64
r_ra	kernel/riscv.h	/^r_ra()$/;"	f	typeref:typename:uint64
r_satp	kernel/riscv.h	/^r_satp()$/;"	f	typeref:typename:uint64
r_scause	kernel/riscv.h	/^r_scause()$/;"	f	typeref:typename:uint64
r_sepc	kernel/riscv.h	/^r_sepc()$/;"	f	typeref:typename:uint64
r_sie	kernel/riscv.h	/^r_sie()$/;"	f	typeref:typename:uint64
r_sip	kernel/riscv.h	/^r_sip()$/;"	f	typeref:typename:uint64
r_sp	kernel/riscv.h	/^r_sp()$/;"	f	typeref:typename:uint64
r_sstatus	kernel/riscv.h	/^r_sstatus()$/;"	f	typeref:typename:uint64
r_stval	kernel/riscv.h	/^r_stval()$/;"	f	typeref:typename:uint64
r_stvec	kernel/riscv.h	/^r_stvec()$/;"	f	typeref:typename:uint64
r_time	kernel/riscv.h	/^r_time()$/;"	f	typeref:typename:uint64
r_tp	kernel/riscv.h	/^r_tp()$/;"	f	typeref:typename:uint64
ra	kernel/net.h	/^  uint8 ra: 1;  \/\/ recursion available$/;"	m	struct:dns	typeref:typename:uint8:1
ra	kernel/proc.h	/^  \/*  40 *\/ uint64 ra;$/;"	m	struct:trapframe	typeref:typename:uint64
ra	kernel/proc.h	/^  uint64 ra;$/;"	m	struct:context	typeref:typename:uint64
raddr	kernel/sysnet.c	/^  uint32 raddr;      \/\/ the remote IPv4 address$/;"	m	struct:sock	typeref:typename:uint32	file:
raddr	server.py	/^    buf, raddr = sock.recvfrom(4096)$/;"	v
ramdiskinit	kernel/ramdisk.c	/^ramdiskinit(void)$/;"	f	typeref:typename:void
ramdiskrw	kernel/ramdisk.c	/^ramdiskrw(struct buf *b)$/;"	f	typeref:typename:void
rand	user/grind.c	/^rand(void)$/;"	f	typeref:typename:int
rand_next	user/grind.c	/^unsigned long rand_next = 1;$/;"	v	typeref:typename:unsigned long
random_str	gradelib.py	/^def random_str(n=8):$/;"	f
rcode	kernel/net.h	/^  uint8 rcode: 4; \/\/ response code$/;"	m	struct:dns	typeref:typename:uint8:4
rd	kernel/net.h	/^  uint8 rd: 1;  \/\/ recursion desired$/;"	m	struct:dns	typeref:typename:uint8:1
read	kernel/file.h	/^  int (*read)(int, uint64, int);$/;"	m	struct:devsw	typeref:typename:int (*)(int,uint64,int)
read_head	kernel/log.c	/^read_head(void)$/;"	f	typeref:typename:void	file:
readable	kernel/file.h	/^  char readable;$/;"	m	struct:file	typeref:typename:char
readi	kernel/fs.c	/^readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)$/;"	f	typeref:typename:int
readopen	kernel/pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
readsb	kernel/fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	typeref:typename:void	file:
recover_from_log	kernel/log.c	/^recover_from_log(void)$/;"	f	typeref:typename:void	file:
redircmd	user/sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f	typeref:struct:cmd *
redircmd	user/sh.c	/^struct redircmd {$/;"	s	file:
ref	kernel/file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode	typeref:typename:int
ref	kernel/file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file	typeref:typename:int
refcnt	kernel/buf.h	/^  uint refcnt;$/;"	m	struct:buf	typeref:typename:uint
register_test	gradelib.py	/^    def register_test(fn, title=title):$/;"	f	function:test	file:
regs	kernel/e1000.c	/^static volatile uint32 *regs;$/;"	v	typeref:typename:volatile uint32 *	file:
release	kernel/spinlock.c	/^release(struct spinlock *lk)$/;"	f	typeref:typename:void
releasesleep	kernel/sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
reparent	kernel/proc.c	/^reparent(struct proc *p)$/;"	f	typeref:typename:void
reparent	user/usertests.c	/^reparent(char *s)$/;"	f	typeref:typename:void
reparent2	user/usertests.c	/^reparent2(char *s)$/;"	f	typeref:typename:void
reserved	kernel/virtio.h	/^  uint32 reserved;$/;"	m	struct:virtio_blk_req	typeref:typename:uint32
reset_fs	gradelib.py	/^def reset_fs():$/;"	f
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
ring	kernel/virtio.h	/^  struct virtq_used_elem ring[NUM];$/;"	m	struct:virtq_used	typeref:struct:virtq_used_elem[]
ring	kernel/virtio.h	/^  uint16 ring[NUM]; \/\/ descriptor numbers of chain heads$/;"	m	struct:virtq_avail	typeref:typename:uint16[]
rinode	mkfs/mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
rmdot	user/usertests.c	/^rmdot(char *s)$/;"	f	typeref:typename:void
rport	kernel/sysnet.c	/^  uint16 rport;      \/\/ the remote UDP port number$/;"	m	struct:sock	typeref:typename:uint16	file:
rsect	mkfs/mkfs.c	/^rsect(uint sec, void *buf)$/;"	f	typeref:typename:void
run	kernel/kalloc.c	/^struct run {$/;"	s	file:
run	user/usertests.c	/^run(void f(char *), char *s) {$/;"	f	typeref:typename:int
run_qemu	gradelib.py	/^    def run_qemu(self, *monitors, **kw):$/;"	m	class:Runner
run_qemu_kw	gradelib.py	/^        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):$/;"	f	member:Runner.run_qemu	file:
run_test	gradelib.py	/^        def run_test():$/;"	f	function:test.register_test	file:
run_tests	gradelib.py	/^def run_tests():$/;"	f
runcmd	user/sh.c	/^runcmd(struct cmd *cmd)$/;"	f	typeref:typename:void
runtests	user/usertests.c	/^runtests(struct test *tests, char *justone, int continuous) {$/;"	f	typeref:typename:int
rwsbrk	user/usertests.c	/^rwsbrk()$/;"	f	typeref:typename:void
rx_desc	kernel/e1000_dev.h	/^struct rx_desc$/;"	s
rx_mbufs	kernel/e1000.c	/^static struct mbuf *rx_mbufs[RX_RING_SIZE];$/;"	v	typeref:struct:mbuf * []	file:
rx_ring	kernel/e1000.c	/^static struct rx_desc rx_ring[RX_RING_SIZE] __attribute__((aligned(16)));$/;"	v	typeref:struct:rx_desc[]	file:
rxq	kernel/sysnet.c	/^  struct mbufq rxq;  \/\/ a queue of packets waiting to be received$/;"	m	struct:sock	typeref:struct:mbufq	file:
s	user/umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon3d351ad10108	file:
s	user/usertests.c	/^  char *s;$/;"	m	struct:test	typeref:typename:char *	file:
s0	kernel/proc.h	/^  \/*  96 *\/ uint64 s0;$/;"	m	struct:trapframe	typeref:typename:uint64
s0	kernel/proc.h	/^  uint64 s0;$/;"	m	struct:context	typeref:typename:uint64
s1	kernel/proc.h	/^  \/* 104 *\/ uint64 s1;$/;"	m	struct:trapframe	typeref:typename:uint64
s1	kernel/proc.h	/^  uint64 s1;$/;"	m	struct:context	typeref:typename:uint64
s10	kernel/proc.h	/^  \/* 240 *\/ uint64 s10;$/;"	m	struct:trapframe	typeref:typename:uint64
s10	kernel/proc.h	/^  uint64 s10;$/;"	m	struct:context	typeref:typename:uint64
s11	kernel/proc.h	/^  \/* 248 *\/ uint64 s11;$/;"	m	struct:trapframe	typeref:typename:uint64
s11	kernel/proc.h	/^  uint64 s11;$/;"	m	struct:context	typeref:typename:uint64
s2	kernel/proc.h	/^  \/* 176 *\/ uint64 s2;$/;"	m	struct:trapframe	typeref:typename:uint64
s2	kernel/proc.h	/^  uint64 s2;$/;"	m	struct:context	typeref:typename:uint64
s3	kernel/proc.h	/^  \/* 184 *\/ uint64 s3;$/;"	m	struct:trapframe	typeref:typename:uint64
s3	kernel/proc.h	/^  uint64 s3;$/;"	m	struct:context	typeref:typename:uint64
s4	kernel/proc.h	/^  \/* 192 *\/ uint64 s4;$/;"	m	struct:trapframe	typeref:typename:uint64
s4	kernel/proc.h	/^  uint64 s4;$/;"	m	struct:context	typeref:typename:uint64
s5	kernel/proc.h	/^  \/* 200 *\/ uint64 s5;$/;"	m	struct:trapframe	typeref:typename:uint64
s5	kernel/proc.h	/^  uint64 s5;$/;"	m	struct:context	typeref:typename:uint64
s6	kernel/proc.h	/^  \/* 208 *\/ uint64 s6;$/;"	m	struct:trapframe	typeref:typename:uint64
s6	kernel/proc.h	/^  uint64 s6;$/;"	m	struct:context	typeref:typename:uint64
s7	kernel/proc.h	/^  \/* 216 *\/ uint64 s7;$/;"	m	struct:trapframe	typeref:typename:uint64
s7	kernel/proc.h	/^  uint64 s7;$/;"	m	struct:context	typeref:typename:uint64
s8	kernel/proc.h	/^  \/* 224 *\/ uint64 s8;$/;"	m	struct:trapframe	typeref:typename:uint64
s8	kernel/proc.h	/^  uint64 s8;$/;"	m	struct:context	typeref:typename:uint64
s9	kernel/proc.h	/^  \/* 232 *\/ uint64 s9;$/;"	m	struct:trapframe	typeref:typename:uint64
s9	kernel/proc.h	/^  uint64 s9;$/;"	m	struct:context	typeref:typename:uint64
safestrcpy	kernel/string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
save	gradelib.py	/^def save(path):$/;"	f
save_on_finish	gradelib.py	/^    def save_on_finish(fail):$/;"	f	function:save	file:
sb	kernel/fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	mkfs/mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrk8000	user/usertests.c	/^sbrk8000(char *s)$/;"	f	typeref:typename:void
sbrkarg	user/usertests.c	/^sbrkarg(char *s)$/;"	f	typeref:typename:void
sbrkbasic	user/usertests.c	/^sbrkbasic(char *s)$/;"	f	typeref:typename:void
sbrkbugs	user/usertests.c	/^sbrkbugs(char *s)$/;"	f	typeref:typename:void
sbrkfail	user/usertests.c	/^sbrkfail(char *s)$/;"	f	typeref:typename:void
sbrklast	user/usertests.c	/^sbrklast(char *s)$/;"	f	typeref:typename:void
sbrkmuch	user/usertests.c	/^sbrkmuch(char *s)$/;"	f	typeref:typename:void
sched	kernel/proc.c	/^sched(void)$/;"	f	typeref:typename:void
scheduler	kernel/proc.c	/^scheduler(void)$/;"	f	typeref:typename:void
sector	kernel/virtio.h	/^  uint64 sector;$/;"	m	struct:virtio_blk_req	typeref:typename:uint64
sent	server.py	/^        sent = sock.sendto(b'this is the host!', raddr)$/;"	v
server	Makefile	/^server:$/;"	t
setkilled	kernel/proc.c	/^setkilled(struct proc *p)$/;"	f	typeref:typename:void
setup_breakpoint	gradelib.py	/^    def setup_breakpoint(runner):$/;"	f	function:stop_breakpoint	file:
setup_call_on_line	gradelib.py	/^    def setup_call_on_line(runner):$/;"	f	function:call_on_line	file:
setup_call_on_line	gradelib.py	/^    def setup_call_on_line(runner):$/;"	f	function:shell_script	file:
setup_save	gradelib.py	/^    def setup_save(runner):$/;"	f	function:save	file:
sfence_vma	kernel/riscv.h	/^sfence_vma()$/;"	f	typeref:typename:void
sha	kernel/net.h	/^  char   sha[ETHADDR_LEN]; \/\/ sender hardware address$/;"	m	struct:arp	typeref:typename:char[]
sharedfd	user/usertests.c	/^sharedfd(char *s)$/;"	f	typeref:typename:void
shell_script	gradelib.py	/^def shell_script(script, terminate_match=None):$/;"	f
shentsize	kernel/elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
shnum	kernel/elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
shoff	kernel/elf.h	/^  uint64 shoff;$/;"	m	struct:elfhdr	typeref:typename:uint64
shost	kernel/net.h	/^  uint8  shost[ETHADDR_LEN];$/;"	m	struct:eth	typeref:typename:uint8[]
show_command	gradelib.py	/^def show_command(cmd):$/;"	f
show_part	gradelib.py	/^    def show_part():$/;"	f	function:end_part	file:
shstrndx	kernel/elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr	typeref:typename:ushort
sip	kernel/net.h	/^  uint32 sip;              \/\/ sender IP address$/;"	m	struct:arp	typeref:typename:uint32
size	kernel/file.h	/^  uint size;$/;"	m	struct:inode	typeref:typename:uint
size	kernel/fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode	typeref:typename:uint
size	kernel/fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock	typeref:typename:uint
size	kernel/log.c	/^  int size;$/;"	m	struct:log	typeref:typename:int	file:
size	kernel/stat.h	/^  uint64 size; \/\/ Size of file in bytes$/;"	m	struct:stat	typeref:typename:uint64
size	user/umalloc.c	/^    uint size;$/;"	m	struct:header::__anon3d351ad10108	typeref:typename:uint	file:
skipelem	kernel/fs.c	/^skipelem(char *path, char *name)$/;"	f	typeref:typename:char *	file:
sleep	kernel/proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f	typeref:typename:void
sleeplock	kernel/sleeplock.h	/^struct sleeplock {$/;"	s
slowtests	user/usertests.c	/^struct test slowtests[] = {$/;"	v	typeref:struct:test[]
snprint_lock	kernel/spinlock.c	/^snprint_lock(char *buf, int sz, struct spinlock *lk)$/;"	f	typeref:typename:int
sock	kernel/file.h	/^  struct sock *sock; \/\/ FD_SOCK$/;"	m	struct:file	typeref:struct:sock *
sock	kernel/sysnet.c	/^struct sock {$/;"	s	file:
sock	ping.py	/^sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)$/;"	v
sock	server.py	/^sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)$/;"	v
sockalloc	kernel/sysnet.c	/^sockalloc(struct file **f, uint32 raddr, uint16 lport, uint16 rport)$/;"	f	typeref:typename:int
sockclose	kernel/sysnet.c	/^sockclose(struct sock *si)$/;"	f	typeref:typename:void
sockets	kernel/sysnet.c	/^static struct sock *sockets;$/;"	v	typeref:struct:sock *	file:
sockinit	kernel/sysnet.c	/^sockinit(void)$/;"	f	typeref:typename:void
sockread	kernel/sysnet.c	/^sockread(struct sock *si, uint64 addr, int n)$/;"	f	typeref:typename:int
sockrecvudp	kernel/sysnet.c	/^sockrecvudp(struct mbuf *m, uint32 raddr, uint16 lport, uint16 rport)$/;"	f	typeref:typename:void
sockwrite	kernel/sysnet.c	/^sockwrite(struct sock *si, uint64 addr, int n)$/;"	f	typeref:typename:int
sp	kernel/proc.h	/^  \/*  48 *\/ uint64 sp;$/;"	m	struct:trapframe	typeref:typename:uint64
sp	kernel/proc.h	/^  uint64 sp;$/;"	m	struct:context	typeref:typename:uint64
special	kernel/e1000_dev.h	/^  uint16 special;$/;"	m	struct:rx_desc	typeref:typename:uint16
special	kernel/e1000_dev.h	/^  uint16 special;$/;"	m	struct:tx_desc	typeref:typename:uint16
spin	kernel/entry.S	/^spin:$/;"	l
spinlock	kernel/spinlock.h	/^struct spinlock {$/;"	s
sport	kernel/net.h	/^  uint16 sport; \/\/ source port$/;"	m	struct:udp	typeref:typename:uint16
stack0	kernel/start.c	/^__attribute__ ((aligned (16))) char stack0[4096 * NCPU];$/;"	v	typeref:typename:char[]
stacktest	user/usertests.c	/^stacktest(char *s)$/;"	f	typeref:typename:void
start	kernel/log.c	/^  int start;$/;"	m	struct:log	typeref:typename:int	file:
start	kernel/start.c	/^start()$/;"	f	typeref:typename:void
start	user/initcode.S	/^start:$/;"	l
started	kernel/main.c	/^volatile static int started = 0;$/;"	v	typeref:typename:volatile int	file:
stat	kernel/stat.h	/^struct stat {$/;"	s
stat	mkfs/mkfs.c	/^#define stat xv6_stat  \/\/ avoid clash with host struct stat$/;"	d	file:
stat	user/ulib.c	/^stat(const char *n, struct stat *st)$/;"	f	typeref:typename:int
state	kernel/proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:procstate
stati	kernel/fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f	typeref:typename:void
static_assert	mkfs/mkfs.c	/^#define static_assert(/;"	d	file:
statslock	kernel/spinlock.c	/^statslock(char *buf, int sz) {$/;"	f	typeref:typename:int
status	kernel/e1000_dev.h	/^  uint8 status;      \/* Descriptor status *\/$/;"	m	struct:rx_desc	typeref:typename:uint8
status	kernel/e1000_dev.h	/^  uint8 status;$/;"	m	struct:tx_desc	typeref:typename:uint8
status	kernel/virtio_disk.c	/^    char status;$/;"	m	struct:disk::__anon0ecc7a2d0108	typeref:typename:char	file:
stop	gradelib.py	/^    def stop(line):$/;"	f	function:stop_on_line	file:
stop_breakpoint	gradelib.py	/^def stop_breakpoint(addr):$/;"	f
stop_on_line	gradelib.py	/^def stop_on_line(regexp):$/;"	f
strchr	user/ulib.c	/^strchr(const char *s, char c)$/;"	f	typeref:typename:char *
strcmp	user/ulib.c	/^strcmp(const char *p, const char *q)$/;"	f	typeref:typename:int
strcpy	user/ulib.c	/^strcpy(char *s, const char *t)$/;"	f	typeref:typename:char *
strlen	kernel/string.c	/^strlen(const char *s)$/;"	f	typeref:typename:int
strlen	user/ulib.c	/^strlen(const char *s)$/;"	f	typeref:typename:uint
strncmp	kernel/string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f	typeref:typename:int
strncpy	kernel/string.c	/^strncpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
subdir	user/usertests.c	/^subdir(char *s)$/;"	f	typeref:typename:void
submit-check	Makefile	/^submit-check:$/;"	t
sum	kernel/net.h	/^  uint16 sum;   \/\/ checksum$/;"	m	struct:udp	typeref:typename:uint16
superblock	kernel/fs.h	/^struct superblock {$/;"	s
swtch	kernel/swtch.S	/^swtch:$/;"	l
symbols	user/sh.c	/^char symbols[] = "<|>&;()";$/;"	v	typeref:typename:char[]
sys_chdir	kernel/sysfile.c	/^sys_chdir(void)$/;"	f	typeref:typename:uint64
sys_close	kernel/sysfile.c	/^sys_close(void)$/;"	f	typeref:typename:uint64
sys_connect	kernel/sysfile.c	/^sys_connect(void)$/;"	f	typeref:typename:int
sys_dup	kernel/sysfile.c	/^sys_dup(void)$/;"	f	typeref:typename:uint64
sys_exec	kernel/sysfile.c	/^sys_exec(void)$/;"	f	typeref:typename:uint64
sys_exit	kernel/sysproc.c	/^sys_exit(void)$/;"	f	typeref:typename:uint64
sys_fork	kernel/sysproc.c	/^sys_fork(void)$/;"	f	typeref:typename:uint64
sys_fstat	kernel/sysfile.c	/^sys_fstat(void)$/;"	f	typeref:typename:uint64
sys_getpid	kernel/sysproc.c	/^sys_getpid(void)$/;"	f	typeref:typename:uint64
sys_kill	kernel/sysproc.c	/^sys_kill(void)$/;"	f	typeref:typename:uint64
sys_link	kernel/sysfile.c	/^sys_link(void)$/;"	f	typeref:typename:uint64
sys_mkdir	kernel/sysfile.c	/^sys_mkdir(void)$/;"	f	typeref:typename:uint64
sys_mknod	kernel/sysfile.c	/^sys_mknod(void)$/;"	f	typeref:typename:uint64
sys_open	kernel/sysfile.c	/^sys_open(void)$/;"	f	typeref:typename:uint64
sys_pipe	kernel/sysfile.c	/^sys_pipe(void)$/;"	f	typeref:typename:uint64
sys_read	kernel/sysfile.c	/^sys_read(void)$/;"	f	typeref:typename:uint64
sys_sbrk	kernel/sysproc.c	/^sys_sbrk(void)$/;"	f	typeref:typename:uint64
sys_sleep	kernel/sysproc.c	/^sys_sleep(void)$/;"	f	typeref:typename:uint64
sys_unlink	kernel/sysfile.c	/^sys_unlink(void)$/;"	f	typeref:typename:uint64
sys_uptime	kernel/sysproc.c	/^sys_uptime(void)$/;"	f	typeref:typename:uint64
sys_wait	kernel/sysproc.c	/^sys_wait(void)$/;"	f	typeref:typename:uint64
sys_write	kernel/sysfile.c	/^sys_write(void)$/;"	f	typeref:typename:uint64
syscall	kernel/syscall.c	/^syscall(void)$/;"	f	typeref:typename:void
syscalls	kernel/syscall.c	/^static uint64 (*syscalls[])(void) = {$/;"	v	typeref:typename:uint64 (* [])(void)	file:
sz	kernel/proc.h	/^  uint64 sz;                   \/\/ Size of process memory (bytes)$/;"	m	struct:proc	typeref:typename:uint64
t0	kernel/proc.h	/^  \/*  72 *\/ uint64 t0;$/;"	m	struct:trapframe	typeref:typename:uint64
t1	kernel/proc.h	/^  \/*  80 *\/ uint64 t1;$/;"	m	struct:trapframe	typeref:typename:uint64
t2	kernel/proc.h	/^  \/*  88 *\/ uint64 t2;$/;"	m	struct:trapframe	typeref:typename:uint64
t3	kernel/proc.h	/^  \/* 256 *\/ uint64 t3;$/;"	m	struct:trapframe	typeref:typename:uint64
t4	kernel/proc.h	/^  \/* 264 *\/ uint64 t4;$/;"	m	struct:trapframe	typeref:typename:uint64
t5	kernel/proc.h	/^  \/* 272 *\/ uint64 t5;$/;"	m	struct:trapframe	typeref:typename:uint64
t6	kernel/proc.h	/^  \/* 280 *\/ uint64 t6;$/;"	m	struct:trapframe	typeref:typename:uint64
tags	Makefile	/^tags: $(OBJS) _init$/;"	t
tail	kernel/net.h	/^  struct mbuf *tail;  \/\/ the last element in the queue$/;"	m	struct:mbufq	typeref:struct:mbuf *
tc	kernel/net.h	/^  uint8 tc: 1;  \/\/ truncated$/;"	m	struct:dns	typeref:typename:uint8:1
test	gradelib.py	/^def test(points, title=None, parent=None):$/;"	f
test	user/usertests.c	/^struct test {$/;"	s	file:
test_nettest	grade-lab-net	/^def test_nettest():$/;"	f
test_nettest_	grade-lab-net	/^def test_nettest_():$/;"	f
test_nettest_dns_test	grade-lab-net	/^def test_nettest_dns_test():$/;"	f
test_nettest_fork_test	grade-lab-net	/^def test_nettest_fork_test():$/;"	f
test_time	grade-lab-net	/^def test_time():$/;"	f
textwrite	user/usertests.c	/^textwrite(char *s)$/;"	f	typeref:typename:void
tha	kernel/net.h	/^  char   tha[ETHADDR_LEN]; \/\/ target hardware address$/;"	m	struct:arp	typeref:typename:char[]
ticks	kernel/trap.c	/^uint ticks;$/;"	v	typeref:typename:uint
tickslock	kernel/trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
timer_scratch	kernel/start.c	/^uint64 timer_scratch[NCPU][5];$/;"	v	typeref:typename:uint64[][5]
timerinit	kernel/start.c	/^timerinit()$/;"	f	typeref:typename:void
timervec	kernel/kernelvec.S	/^timervec:$/;"	l
tip	kernel/net.h	/^  uint32 tip;              \/\/ target IP address$/;"	m	struct:arp	typeref:typename:uint32
tp	kernel/proc.h	/^  \/*  64 *\/ uint64 tp;$/;"	m	struct:trapframe	typeref:typename:uint64
trampoline	kernel/trampoline.S	/^trampoline:$/;"	l
trapframe	kernel/proc.h	/^  struct trapframe *trapframe; \/\/ data page for trampoline.S$/;"	m	struct:proc	typeref:struct:trapframe *
trapframe	kernel/proc.h	/^struct trapframe {$/;"	s
trapinit	kernel/trap.c	/^trapinit(void)$/;"	f	typeref:typename:void
trapinithart	kernel/trap.c	/^trapinithart(void)$/;"	f	typeref:typename:void
truncate1	user/usertests.c	/^truncate1(char *s)$/;"	f	typeref:typename:void
truncate2	user/usertests.c	/^truncate2(char *s)$/;"	f	typeref:typename:void
truncate3	user/usertests.c	/^truncate3(char *s)$/;"	f	typeref:typename:void
ttl	kernel/net.h	/^  uint32 ttl;$/;"	m	struct:dns_data	typeref:typename:uint32
twochildren	user/usertests.c	/^twochildren(char *s)$/;"	f	typeref:typename:void
tx_desc	kernel/e1000_dev.h	/^struct tx_desc$/;"	s
tx_mbufs	kernel/e1000.c	/^static struct mbuf *tx_mbufs[TX_RING_SIZE];$/;"	v	typeref:struct:mbuf * []	file:
tx_ring	kernel/e1000.c	/^static struct tx_desc tx_ring[TX_RING_SIZE] __attribute__((aligned(16)));$/;"	v	typeref:struct:tx_desc[]	file:
type	kernel/elf.h	/^  uint32 type;$/;"	m	struct:proghdr	typeref:typename:uint32
type	kernel/elf.h	/^  ushort type;$/;"	m	struct:elfhdr	typeref:typename:ushort
type	kernel/file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE, FD_SOCK } type;$/;"	m	struct:file	typeref:enum:file::__anonc1f1ee2b0103
type	kernel/file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode	typeref:typename:short
type	kernel/fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode	typeref:typename:short
type	kernel/net.h	/^  uint16 type;$/;"	m	struct:dns_data	typeref:typename:uint16
type	kernel/net.h	/^  uint16 type;$/;"	m	struct:eth	typeref:typename:uint16
type	kernel/stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat	typeref:typename:short
type	kernel/virtio.h	/^  uint32 type; \/\/ VIRTIO_BLK_T_IN or ..._OUT$/;"	m	struct:virtio_blk_req	typeref:typename:uint32
type	user/sh.c	/^  int type;$/;"	m	struct:backcmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:cmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:execcmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:listcmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:pipecmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:redircmd	typeref:typename:int	file:
uart_tx_buf	kernel/uart.c	/^char uart_tx_buf[UART_TX_BUF_SIZE];$/;"	v	typeref:typename:char[]
uart_tx_lock	kernel/uart.c	/^struct spinlock uart_tx_lock;$/;"	v	typeref:struct:spinlock
uart_tx_r	kernel/uart.c	/^uint64 uart_tx_r; \/\/ read next from uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE]$/;"	v	typeref:typename:uint64
uart_tx_w	kernel/uart.c	/^uint64 uart_tx_w; \/\/ write next to uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE]$/;"	v	typeref:typename:uint64
uartgetc	kernel/uart.c	/^uartgetc(void)$/;"	f	typeref:typename:int
uartinit	kernel/uart.c	/^uartinit(void)$/;"	f	typeref:typename:void
uartintr	kernel/uart.c	/^uartintr(void)$/;"	f	typeref:typename:void
uartputc	kernel/uart.c	/^uartputc(int c)$/;"	f	typeref:typename:void
uartputc_sync	kernel/uart.c	/^uartputc_sync(int c)$/;"	f	typeref:typename:void
uartstart	kernel/uart.c	/^uartstart()$/;"	f	typeref:typename:void
uchar	kernel/types.h	/^typedef unsigned char  uchar;$/;"	t	typeref:typename:unsigned char
udp	kernel/net.h	/^struct udp {$/;"	s
uint	kernel/types.h	/^typedef unsigned int   uint;$/;"	t	typeref:typename:unsigned int
uint16	kernel/types.h	/^typedef unsigned short uint16;$/;"	t	typeref:typename:unsigned short
uint32	kernel/types.h	/^typedef unsigned int  uint32;$/;"	t	typeref:typename:unsigned int
uint64	kernel/types.h	/^typedef unsigned long uint64;$/;"	t	typeref:typename:unsigned long
uint8	kernel/types.h	/^typedef unsigned char uint8;$/;"	t	typeref:typename:unsigned char
ulen	kernel/net.h	/^  uint16 ulen;  \/\/ length, including udp header, not including IP header$/;"	m	struct:udp	typeref:typename:uint16
uninit	user/usertests.c	/^char uninit[10000];$/;"	v	typeref:typename:char[10000]
unlinkread	user/usertests.c	/^unlinkread(char *s)$/;"	f	typeref:typename:void
unused	kernel/virtio.h	/^  uint16 unused;$/;"	m	struct:virtq_avail	typeref:typename:uint16
used	kernel/virtio_disk.c	/^  struct virtq_used *used;$/;"	m	struct:disk	typeref:struct:virtq_used *	file:
used_idx	kernel/virtio_disk.c	/^  uint16 used_idx; \/\/ we've looked this far in used[2..NUM].$/;"	m	struct:disk	typeref:typename:uint16	file:
user_test	gradelib.py	/^    def user_test(self, binary, *monitors, **kw):$/;"	m	class:Runner
userinit	kernel/proc.c	/^userinit(void)$/;"	f	typeref:typename:void
userret	kernel/trampoline.S	/^userret:$/;"	l
usertrap	kernel/trap.c	/^usertrap(void)$/;"	f	typeref:typename:void
usertrapret	kernel/trap.c	/^usertrapret(void)$/;"	f	typeref:typename:void
uservec	kernel/trampoline.S	/^uservec:    $/;"	l
ushort	kernel/types.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
usyscall	kernel/memlayout.h	/^struct usyscall {$/;"	s
uvmalloc	kernel/vm.c	/^uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)$/;"	f	typeref:typename:uint64
uvmclear	kernel/vm.c	/^uvmclear(pagetable_t pagetable, uint64 va)$/;"	f	typeref:typename:void
uvmcopy	kernel/vm.c	/^uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)$/;"	f	typeref:typename:int
uvmcreate	kernel/vm.c	/^uvmcreate()$/;"	f	typeref:typename:pagetable_t
uvmdealloc	kernel/vm.c	/^uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)$/;"	f	typeref:typename:uint64
uvmfirst	kernel/vm.c	/^uvmfirst(pagetable_t pagetable, uchar *src, uint sz)$/;"	f	typeref:typename:void
uvmfree	kernel/vm.c	/^uvmfree(pagetable_t pagetable, uint64 sz)$/;"	f	typeref:typename:void
uvmunmap	kernel/vm.c	/^uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)$/;"	f	typeref:typename:void
vaddr	kernel/elf.h	/^  uint64 vaddr;$/;"	m	struct:proghdr	typeref:typename:uint64
valid	kernel/buf.h	/^  int valid;   \/\/ has data been read from disk?$/;"	m	struct:buf	typeref:typename:int
valid	kernel/file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode	typeref:typename:int
validatetest	user/usertests.c	/^validatetest(char *s)$/;"	f	typeref:typename:void
vdisk_lock	kernel/virtio_disk.c	/^  struct spinlock vdisk_lock;$/;"	m	struct:disk	typeref:struct:spinlock	file:
version	kernel/elf.h	/^  uint version;$/;"	m	struct:elfhdr	typeref:typename:uint
virtio_blk_req	kernel/virtio.h	/^struct virtio_blk_req {$/;"	s
virtio_disk_init	kernel/virtio_disk.c	/^virtio_disk_init(void)$/;"	f	typeref:typename:void
virtio_disk_intr	kernel/virtio_disk.c	/^virtio_disk_intr()$/;"	f	typeref:typename:void
virtio_disk_rw	kernel/virtio_disk.c	/^virtio_disk_rw(struct buf *b, int write)$/;"	f	typeref:typename:void
virtq_avail	kernel/virtio.h	/^struct virtq_avail {$/;"	s
virtq_desc	kernel/virtio.h	/^struct virtq_desc {$/;"	s
virtq_used	kernel/virtio.h	/^struct virtq_used {$/;"	s
virtq_used_elem	kernel/virtio.h	/^struct virtq_used_elem {$/;"	s
vprintf	user/printf.c	/^vprintf(int fd, const char *fmt, va_list ap)$/;"	f	typeref:typename:void
w	kernel/console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anonb6393d190108	typeref:typename:uint	file:
w_mcounteren	kernel/riscv.h	/^w_mcounteren(uint64 x)$/;"	f	typeref:typename:void
w_medeleg	kernel/riscv.h	/^w_medeleg(uint64 x)$/;"	f	typeref:typename:void
w_mepc	kernel/riscv.h	/^w_mepc(uint64 x)$/;"	f	typeref:typename:void
w_mideleg	kernel/riscv.h	/^w_mideleg(uint64 x)$/;"	f	typeref:typename:void
w_mie	kernel/riscv.h	/^w_mie(uint64 x)$/;"	f	typeref:typename:void
w_mscratch	kernel/riscv.h	/^w_mscratch(uint64 x)$/;"	f	typeref:typename:void
w_mstatus	kernel/riscv.h	/^w_mstatus(uint64 x)$/;"	f	typeref:typename:void
w_mtvec	kernel/riscv.h	/^w_mtvec(uint64 x)$/;"	f	typeref:typename:void
w_pmpaddr0	kernel/riscv.h	/^w_pmpaddr0(uint64 x)$/;"	f	typeref:typename:void
w_pmpcfg0	kernel/riscv.h	/^w_pmpcfg0(uint64 x)$/;"	f	typeref:typename:void
w_satp	kernel/riscv.h	/^w_satp(uint64 x)$/;"	f	typeref:typename:void
w_sepc	kernel/riscv.h	/^w_sepc(uint64 x)$/;"	f	typeref:typename:void
w_sie	kernel/riscv.h	/^w_sie(uint64 x)$/;"	f	typeref:typename:void
w_sip	kernel/riscv.h	/^w_sip(uint64 x)$/;"	f	typeref:typename:void
w_sstatus	kernel/riscv.h	/^w_sstatus(uint64 x)$/;"	f	typeref:typename:void
w_stvec	kernel/riscv.h	/^w_stvec(uint64 x)$/;"	f	typeref:typename:void
w_tp	kernel/riscv.h	/^w_tp(uint64 x)$/;"	f	typeref:typename:void
wait	gradelib.py	/^    def wait(self):$/;"	m	class:QEMU
wait	kernel/proc.c	/^wait(uint64 addr)$/;"	f	typeref:typename:int
wait_lock	kernel/proc.c	/^struct spinlock wait_lock;$/;"	v	typeref:struct:spinlock
wakeup	kernel/proc.c	/^wakeup(void *chan)$/;"	f	typeref:typename:void
walk	kernel/vm.c	/^walk(pagetable_t pagetable, uint64 va, int alloc)$/;"	f	typeref:typename:pte_t *
walkaddr	kernel/vm.c	/^walkaddr(pagetable_t pagetable, uint64 va)$/;"	f	typeref:typename:uint64
wc	user/wc.c	/^wc(int fd, char *name)$/;"	f	typeref:typename:void
whitespace	user/sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v	typeref:typename:char[]
winode	mkfs/mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
writable	kernel/file.h	/^  char writable;$/;"	m	struct:file	typeref:typename:char
write	gradelib.py	/^    def write(self, buf):$/;"	m	class:QEMU
write	kernel/file.h	/^  int (*write)(int, uint64, int);$/;"	m	struct:devsw	typeref:typename:int (*)(int,uint64,int)
write_head	kernel/log.c	/^write_head(void)$/;"	f	typeref:typename:void	file:
write_log	kernel/log.c	/^write_log(void)$/;"	f	typeref:typename:void	file:
write_results	gradelib.py	/^def write_results():$/;"	f
writebig	user/usertests.c	/^writebig(char *s)$/;"	f	typeref:typename:void
writei	kernel/fs.c	/^writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)$/;"	f	typeref:typename:int
writeopen	kernel/pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
writetest	user/usertests.c	/^writetest(char *s)$/;"	f	typeref:typename:void
wsect	mkfs/mkfs.c	/^wsect(uint sec, void *buf)$/;"	f	typeref:typename:void
x	user/umalloc.c	/^  Align x;$/;"	m	union:header	typeref:typename:Align	file:
xint	mkfs/mkfs.c	/^xint(uint x)$/;"	f	typeref:typename:uint
xshort	mkfs/mkfs.c	/^xshort(ushort x)$/;"	f	typeref:typename:ushort
xstate	kernel/proc.h	/^  int xstate;                  \/\/ Exit status to be returned to parent's wait$/;"	m	struct:proc	typeref:typename:int
yield	kernel/proc.c	/^yield(void)$/;"	f	typeref:typename:void
z	kernel/net.h	/^  uint8 z:  1;  $/;"	m	struct:dns	typeref:typename:uint8:1
zeroes	mkfs/mkfs.c	/^char zeroes[BSIZE];$/;"	v	typeref:typename:char[]
zipball	Makefile	/^zipball: clean submit-check$/;"	t
